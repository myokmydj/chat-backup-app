// File: package.json

{
  "name": "chat-backup-app",
  "version": "0.1.0",
  "main": "public/electron.js",
  "homepage": "./",
  "private": true,
  "dependencies": {
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@testing-library/user-event": "^13.5.0",
    "@tiptap/core": "^2.5.7",
    "@tiptap/extension-subscript": "^2.5.7",
    "@tiptap/extension-superscript": "^2.5.7",
    "@tiptap/extension-text-style": "^2.5.7",
    "@tiptap/react": "^2.5.7",
    "@tiptap/starter-kit": "^2.5.7",
    "axios": "^1.7.2",
    "cheerio": "^1.0.0-rc.12",
    "colorthief": "^2.6.0",
    "cropperjs": "^2.0.1",
    "dexie": "^4.2.0",
    "electron-is-dev": "^2.0.0",
    "font-list": "^2.0.1",
    "react": "^19.1.1",
    "react-cropper": "^2.3.3",
    "react-dom": "^19.1.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4",
    "xlsx": "^0.18.5"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "electron:start": "concurrently \"npm start\" \"wait-on http://localhost:3000 && electron .\"",
    "electron:build": "npm run build && electron-builder",
    "package:win": "npm run build && electron-builder --win",
    "package:mac": "npm run build && electron-builder --mac"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "build": {
    "appId": "com.yourname.chat-backup-app",
    "productName": "Chat Backup",
    "files": [
      "build/**/*",
      "node_modules/**/*"
    ],
    "directories": {
      "buildResources": "assets"
    },
    "win": {
      "target": "nsis"
    },
    "mac": {
      "target": "dmg",
      "identity": null
    }
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "electron": "^31.2.1",
    "electron-builder": "^24.13.3",
    "wait-on": "^7.2.0"
  }
}


// ======================================================
// File: src\components\AddPairModal.js
// ======================================================

// 파일: src/components/AddPairModal.js (단순화 완료)

import React, { useState, useRef } from 'react';
import SettingsModal from './SettingsModal';
import ImageCropModal from './ImageCropModal';

const AddPairModal = ({ isOpen, onClose, onAddLog }) => {
  const [title, setTitle] = useState('');
  const [backgroundImage, setBackgroundImage] = useState(''); // Base64 URL
  const [imageToCrop, setImageToCrop] = useState(null);
  const [isCropperOpen, setIsCropperOpen] = useState(false);
  const fileInputRef = useRef(null);

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = () => {
        setImageToCrop(reader.result);
        setIsCropperOpen(true);
      };
      reader.readAsDataURL(file);
    }
    e.target.value = null;
  };

  const handleCropComplete = (croppedDataUrl) => {
    setBackgroundImage(croppedDataUrl);
    setIsCropperOpen(false);
  };

  const handleClearImage = () => {
    setBackgroundImage('');
  }

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!title.trim()) {
      alert('제목을 입력해주세요.');
      return;
    }
    // 테마 생성 없이, 수집된 데이터만 부모에게 전달합니다.
    onAddLog({ title, backgroundImage });
    
    // 상태 초기화 및 모달 닫기
    setTitle('');
    setBackgroundImage('');
    onClose();
  };

  return (
    <>
      <SettingsModal isOpen={isOpen} onClose={onClose} title="새 대화 구성">
        <form onSubmit={handleSubmit} className="add-pair-form utility-panel">
          
          <div className="form-card">
            <label htmlFor="pair-title" className="card-label">제목</label>
            <input
              id="pair-title"
              type="text"
              placeholder="대화의 고유한 제목을 입력"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              required
            />
          </div>

          <div className="form-card">
            <label className="card-label">배경 이미지 (선택)</label>
            <div className="image-upload-grid">
              <div className="image-preview-box">
                {backgroundImage ? (
                  <img src={backgroundImage} alt="배경 미리보기" className="image-preview-instance" />
                ) : (
                  <div className="image-placeholder">
                    <i className="fas fa-image"></i>
                    <span>이미지 없음</span>
                  </div>
                )}
              </div>
              <div className="file-upload-controls">
                <p className="upload-description">
                  대표 이미지를 선택하면 어울리는 테마를 추천해 드립니다.
                </p>
                <button type="button" className="btn-secondary" onClick={() => fileInputRef.current.click()}>
                  이미지 선택...
                </button>
                {backgroundImage && (
                  <button type="button" className="btn-tertiary" onClick={handleClearImage}>
                    삭제
                  </button>
                )}
              </div>
            </div>
          </div>
          
          <button type="submit" className="btn-primary">생성하기</button>
          
          <input type="file" ref={fileInputRef} style={{ display: 'none' }} accept="image/*" onChange={handleFileChange} />
        </form>
      </SettingsModal>
      
      <ImageCropModal
        isOpen={isCropperOpen}
        onClose={() => setIsCropperOpen(false)}
        imageSrc={imageToCrop}
        onCropComplete={handleCropComplete}
        aspectRatio={16 / 9}
        outputWidth={512}
      />
    </>
  );
};
export default AddPairModal;


// ======================================================
// File: src\components\BookmarkPanel.js
// ======================================================

// File: src/components/BookmarkPanel.js (수정 완료)

import React from 'react';
import IndexedDBImage from './IndexedDBImage';

const BookmarkPanel = ({ isOpen, onClose, bookmarks, onBookmarkClick, characters }) => {
  // ▼▼▼ [수정] 캐릭터 버전을 찾는 헬퍼 함수 ▼▼▼
  const getCharacterVersion = (sender, versionId) => {
    const key = (sender === 'Me' || sender === 'me') ? 'me' : 'other';
    const versions = (Array.isArray(characters[key]) ? characters[key] : []);
    if (versions.length === 0) return {};
    
    return versions.find(v => v.id === versionId) || versions[0];
  };

  const renderContent = (message) => {
    switch (message.type) {
      case 'image': return '[이미지]';
      case 'video': return '[비디오]';
      case 'embed': return `[링크: ${message.content.service}]`;
      case 'text':
      default:
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = message.content || message.text || '';
        return tempDiv.textContent || tempDiv.innerText || '';
    }
  };

  return (
    <>
      <div className={`bookmark-panel-overlay ${isOpen ? 'open' : ''}`} onClick={onClose}></div>
      <div className={`bookmark-panel ${isOpen ? 'open' : ''}`}>
        <div className="bookmark-panel-header">
          <h3><i className="fas fa-bookmark"></i> 북마크</h3>
          <button onClick={onClose} className="panel-close-btn">&times;</button>
        </div>
        <div className="bookmark-list">
          {bookmarks && bookmarks.length > 0 ? (
            bookmarks.map(bookmark => {
              // ▼▼▼ [수정] 메시지에 저장된 버전 ID로 캐릭터 정보 조회 ▼▼▼
              const character = getCharacterVersion(bookmark.sender, bookmark.characterVersionId);
              return (
                <div key={bookmark.id} className="bookmark-item" onClick={() => onBookmarkClick(bookmark.id)}>
                  <div className="bookmark-item-avatar">
                    {character.avatar && <IndexedDBImage imageId={character.avatar} />}
                  </div>
                  <div className="bookmark-item-content">
                    <div className="bookmark-item-sender">{character.name}</div>
                    <div className="bookmark-item-text">{renderContent(bookmark)}</div>
                  </div>
                </div>
              );
            })
          ) : (
            <div className="bookmark-empty">
              <i className="fas fa-book-open"></i>
              <p>북마크된 메시지가 없습니다.</p>
              <span>메시지를 우클릭하여 북마크에 추가해 보세요.</span>
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default BookmarkPanel;


// ======================================================
// File: src\components\CharacterSettingsModal.js
// ======================================================

// File: src/components/CharacterSettingsModal.js (수정 완료)

import React, { useState, useEffect, useRef } from 'react';
import SettingsModal from './SettingsModal';
import IndexedDBImage from './IndexedDBImage';
import { db } from '../db';

const dataURLtoBlob = (dataurl) => {
  const arr = dataurl.split(',');
  const mime = arr[0].match(/:(.*?);/)[1];
  const bstr = atob(arr[1]);
  let n = bstr.length;
  const u8arr = new Uint8Array(n);
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }
  return new Blob([u8arr], { type: mime });
};

const createNewVersion = (name) => ({
  id: `v_${Date.now()}`,
  name: name || '새 버전',
  username: '', avatar: null, profileBanner: null, headerColor1: '#232428', headerColor2: '#232428', statusMessage: '', memo: '', tags: []
});

const CharacterSettingsModal = ({ isOpen, onClose, pairData, onUpdate, onOpenCropper }) => {
  const [characters, setCharacters] = useState({ me: [], other: [] });
  const [selectedVersion, setSelectedVersion] = useState({ me: null, other: null });
  const [tagInputs, setTagInputs] = useState({ me: '', other: '' });

  const fileInputRefs = {
    me_avatar: useRef(null), other_avatar: useRef(null),
    me_banner: useRef(null), other_banner: useRef(null),
  };

  useEffect(() => {
    if (isOpen && pairData) {
      const initialMe = Array.isArray(pairData.characters?.me) && pairData.characters.me.length > 0
        ? pairData.characters.me
        : [createNewVersion('A 캐릭터')];
      const initialOther = Array.isArray(pairData.characters?.other) && pairData.characters.other.length > 0
        ? pairData.characters.other
        : [createNewVersion('B 캐릭터')];
      
      setCharacters({ me: initialMe, other: initialOther });
      setSelectedVersion({ me: initialMe[0]?.id, other: initialOther[0]?.id });
    }
  }, [isOpen, pairData]);

  const handleVersionChange = (key, versionId) => {
    setSelectedVersion(prev => ({ ...prev, [key]: versionId }));
  };

  const handleAddVersion = (key) => {
    const newVersion = createNewVersion(`버전 ${characters[key].length + 1}`);
    setCharacters(prev => ({ ...prev, [key]: [...prev[key], newVersion] }));
    setSelectedVersion(prev => ({ ...prev, [key]: newVersion.id }));
  };
  
  const handleCloneVersion = (key) => {
    const sourceVersion = characters[key].find(v => v.id === selectedVersion[key]);
    if (!sourceVersion) return;
    const clonedVersion = { ...sourceVersion, id: `v_${Date.now()}`, name: `${sourceVersion.name} (복제)` };
    setCharacters(prev => ({ ...prev, [key]: [...prev[key], clonedVersion] }));
    setSelectedVersion(prev => ({ ...prev, [key]: clonedVersion.id }));
  };

  const handleDeleteVersion = (key) => {
    if (characters[key].length <= 1) {
      alert('최소 한 개의 프로필 버전은 유지해야 합니다.');
      return;
    }
    if (window.confirm('이 프로필 버전을 삭제하시겠습니까?')) {
      const newVersions = characters[key].filter(v => v.id !== selectedVersion[key]);
      setCharacters(prev => ({ ...prev, [key]: newVersions }));
      setSelectedVersion(prev => ({ ...prev, [key]: newVersions[0]?.id }));
    }
  };

  const handleFieldChange = (key, field, value) => {
    setCharacters(prev => ({
      ...prev,
      [key]: prev[key].map(v => v.id === selectedVersion[key] ? { ...v, [field]: value } : v)
    }));
  };

  const handleFileSelect = (key, field, e) => {
    const file = e.target.files[0];
    if (file) {
      const callback = async (croppedDataUrl) => {
        try {
          const imageBlob = dataURLtoBlob(croppedDataUrl);
          const imageId = await db.images.add({ data: imageBlob });
          handleFieldChange(key, field, imageId);
        } catch (error) { console.error("이미지 저장 실패:", error); }
      };
      const aspectRatio = field === 'avatar' ? 1 : 3;
      onOpenCropper(file, aspectRatio, callback);
    }
    e.target.value = null;
  };

  const handleAddTag = (key) => {
    const currentVersion = characters[key].find(v => v.id === selectedVersion[key]);
    if (!currentVersion) return;
    const trimmedTag = tagInputs[key].trim();
    if (trimmedTag && !(currentVersion.tags || []).includes(trimmedTag)) {
      handleFieldChange(key, 'tags', [...(currentVersion.tags || []), trimmedTag]);
      setTagInputs(prev => ({ ...prev, [key]: '' }));
    }
  };

  const handleRemoveTag = (key, tagToRemove) => {
    const currentVersion = characters[key].find(v => v.id === selectedVersion[key]);
    if (!currentVersion) return;
    const newTags = (currentVersion.tags || []).filter(tag => tag !== tagToRemove);
    handleFieldChange(key, 'tags', newTags);
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onUpdate(pairData.id, characters);
    onClose();
  };

  const renderCharacterForm = (key, label) => {
    const currentVersion = characters[key].find(v => v.id === selectedVersion[key]);
    if (!currentVersion) return null;

    return (
      <div className="character-profile-editor">
        <h3 className="character-editor-title">{label}</h3>
        
        <div className="form-card version-manager">
          <label className="card-label">프로필 버전 관리</label>
          <select value={selectedVersion[key]} onChange={(e) => handleVersionChange(key, e.target.value)}>
            {characters[key].map(v => <option key={v.id} value={v.id}>{v.name}</option>)}
          </select>
          <div className="version-buttons">
            <button type="button" onClick={() => handleAddVersion(key)} title="새 버전 추가"><i className="fas fa-plus"></i></button>
            <button type="button" onClick={() => handleCloneVersion(key)} title="현재 버전 복제"><i className="fas fa-clone"></i></button>
            <button type="button" onClick={() => handleDeleteVersion(key)} title="현재 버전 삭제" disabled={characters[key].length <= 1}><i className="fas fa-trash-alt"></i></button>
          </div>
        </div>

        <div className="form-card">
          <label className="card-label">기본 정보</label>
          <div className="image-upload-grid avatar-grid">
            <div className="image-preview-box avatar-preview" onClick={() => fileInputRefs[`${key}_avatar`].current.click()}>
              {currentVersion.avatar ? <IndexedDBImage imageId={currentVersion.avatar} className="image-preview-instance" /> : <div className="image-placeholder"><i className="fas fa-user"></i><span>아바타</span></div>}
            </div>
            <div className="file-upload-controls">
              <input type="text" placeholder="버전 이름 (예: 평상복)" value={currentVersion.name || ''} onChange={(e) => handleFieldChange(key, 'name', e.target.value)} />
              <input type="text" placeholder="사용자명" value={currentVersion.username || ''} onChange={(e) => handleFieldChange(key, 'username', e.target.value)} />
            </div>
          </div>
        </div>
        <div className="form-card">
          <label className="card-label">프로필 꾸미기</label>
          <div className="image-preview-box banner-preview" onClick={() => fileInputRefs[`${key}_banner`].current.click()}>
            {currentVersion.profileBanner ? <IndexedDBImage imageId={currentVersion.profileBanner} className="image-preview-instance" /> : <div className="image-placeholder"><i className="fas fa-image"></i><span>프로필 배너 (3:1 비율)</span></div>}
          </div>
          <div className="color-picker-group">
            <label>헤더 그라데이션:</label>
            <input type="color" value={currentVersion.headerColor1 || '#232428'} onChange={(e) => handleFieldChange(key, 'headerColor1', e.target.value)} />
            <span>→</span>
            <input type="color" value={currentVersion.headerColor2 || '#232428'} onChange={(e) => handleFieldChange(key, 'headerColor2', e.target.value)} />
          </div>
          <input type="text" placeholder="상태 메시지 (선택)" value={currentVersion.statusMessage || ''} onChange={(e) => handleFieldChange(key, 'statusMessage', e.target.value)} />
        </div>
        <div className="form-card">
          <label className="card-label">메모 및 태그</label>
          <textarea placeholder="메모 (선택)" rows="3" value={currentVersion.memo || ''} onChange={(e) => handleFieldChange(key, 'memo', e.target.value)} />
          <div className="tag-input-container" style={{marginTop: '1rem'}}>
            <input type="text" placeholder="태그 추가 후 Enter" value={tagInputs[key]} onChange={(e) => setTagInputs(prev => ({ ...prev, [key]: e.target.value }))} onKeyDown={(e) => { if (!e.nativeEvent.isComposing && e.key === 'Enter') { e.preventDefault(); handleAddTag(key); }}} />
            <button type="button" onClick={() => handleAddTag(key)}>+</button>
          </div>
          <div className="tags-list">
            {(currentVersion.tags || []).map(tag => <div key={tag} className="tag-item">{tag}<button type="button" onClick={() => handleRemoveTag(key, tag)}>&times;</button></div>)}
          </div>
        </div>
        <input type="file" ref={fileInputRefs[`${key}_avatar`]} style={{ display: 'none' }} accept="image/*" onChange={(e) => handleFileSelect(key, 'avatar', e)} />
        <input type="file" ref={fileInputRefs[`${key}_banner`]} style={{ display: 'none' }} accept="image/*" onChange={(e) => handleFileSelect(key, 'banner', e)} />
      </div>
    );
  };

  return (
    <SettingsModal isOpen={isOpen} onClose={onClose} title="캐릭터 설정" customContentClass="character-settings-modal-content">
      <form onSubmit={handleSubmit} className="character-settings-form">
        <div className="character-form-grid">
          {renderCharacterForm('me', 'A 캐릭터 (나)')}
          {renderCharacterForm('other', 'B 캐릭터 (상대)')}
        </div>
        <button type="submit" className="btn-primary" style={{ marginTop: '16px' }}>저장하기</button>
      </form>
    </SettingsModal>
  );
};

export default CharacterSettingsModal;


// ======================================================
// File: src\components\ContextMenu.js
// ======================================================

// 파일: src/components/ContextMenu.js

import React, { useEffect, useRef } from 'react';

const ContextMenu = ({ position, items, onClose }) => {
  const menuRef = useRef(null);

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (menuRef.current && !menuRef.current.contains(event.target)) {
        onClose();
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [onClose]);

  // 메뉴 항목이 없으면 렌더링하지 않음
  if (!items || items.length === 0) {
    return null;
  }

  return (
    <div 
      ref={menuRef}
      className="context-menu" 
      style={{ top: position.y, left: position.x }}
    >
      <ul>
        {items.map((item, index) => (
          // isSeparator가 true이면 구분선 렌더링
          item.isSeparator ? (
            <li key={`separator-${index}`} className="separator"></li>
          ) : (
            <li 
              key={item.label}
              onClick={() => {
                if (item.action) item.action();
                onClose(); // 메뉴 항목 클릭 후 메뉴 닫기
              }} 
              className={item.className || ''}
            >
              {item.label}
            </li>
          )
        ))}
      </ul>
    </div>
  );
};

export default ContextMenu;


// ======================================================
// File: src\components\ConversationCard.js
// ======================================================

// src/components/ConversationCard.js (수정 완료)
import React from 'react';

// onContextMenu prop을 추가로 받도록 수정
const ConversationCard = ({ log, onSelect, onContextMenu }) => {
  return (
    <div
      className="conversation-card"
      style={{ backgroundImage: `url(${log.backgroundImage})` }}
      onClick={() => onSelect(log.id)}
      onContextMenu={onContextMenu} // ▼▼▼ NEW ▼▼▼: 이벤트 핸들러 연결
    >
      <div className="card-content">
        <div className="card-title">{log.title}</div>
        <div className="card-tags">
          {(log.tags || []).map((tag, index) => (
            <span key={index} className="tag-pill">{tag}</span>
          ))}
        </div>
      </div>
      <div className="card-avatars">
        {(log.avatars || []).map((avatarUrl, index) => (
          <div
            key={index}
            className="card-avatar"
            style={{ backgroundImage: `url(${avatarUrl})` }}
          />
        ))}
      </div>
    </div>
  );
};

export default ConversationCard;


// ======================================================
// File: src\components\ConversationList.js
// ======================================================

// 파일: src/components/ConversationList.js (원래대로 복구)

import React, { useState, useRef, useEffect } from 'react';
import { db } from '../db';
import IndexedDBImage from './IndexedDBImage';
import ContextMenu from './ContextMenu';

// ImageSlider 컴포넌트: 파일 선택 시 부모로 이벤트를 전달하는 역할만 하도록 단순화
const ImageSlider = ({ images, onSelect, onAdd, onDelete }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const fileInputRef = useRef(null);

  useEffect(() => {
    const safeImages = images || [];
    if (safeImages.length === 0) {
      setCurrentIndex(0);
    } else if (currentIndex >= safeImages.length) {
      setCurrentIndex(safeImages.length - 1);
    }
  }, [images, currentIndex]);

  const prevSlide = (e) => {
    e.stopPropagation();
    const safeImages = images || [];
    const isFirstSlide = currentIndex === 0;
    const newIndex = isFirstSlide ? safeImages.length - 1 : currentIndex - 1;
    setCurrentIndex(newIndex);
  };

  const nextSlide = (e) => {
    e.stopPropagation();
    const safeImages = images || [];
    const isLastSlide = currentIndex === safeImages.length - 1;
    const newIndex = isLastSlide ? 0 : currentIndex + 1;
    setCurrentIndex(newIndex);
  };

  const handleAddClick = () => {
    fileInputRef.current.click();
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      onAdd(file); // 선택된 파일을 부모(Workspace)로 전달
    }
    e.target.value = null;
  };
  
  const handleDelete = (e) => {
    e.stopPropagation();
    const safeImages = images || [];
    if (safeImages.length > 0 && window.confirm('이 이미지를 삭제하시겠습니까?')) {
      onDelete(safeImages[currentIndex]);
    }
  };

  const handleSelect = async () => {
    const safeImages = images || [];
    if (safeImages.length > 0) {
      const imageRecord = await db.images.get(safeImages[currentIndex]);
      if (imageRecord && imageRecord.data) {
        onSelect(imageRecord.data); // Blob 데이터를 부모(Workspace)로 전달
      }
    }
  };

  return (
    <div className="conversation-list-slider">
      {(images || []).length > 0 ? (
        <>
          <div className="slider-arrow left" onClick={prevSlide}><i className="fas fa-chevron-left"></i></div>
          <div className="slide-image-container" onClick={handleSelect} title="클릭하여 대화 배경 이미지로 설정">
            <IndexedDBImage imageId={images[currentIndex]} className="slide-image-large" />
          </div>
          <div className="slider-controls">
            <button onClick={handleAddClick} title="이미지 추가"><i className="fas fa-plus"></i></button>
            <button onClick={handleDelete} title="이미지 삭제"><i className="fas fa-trash-alt"></i></button>
          </div>
          <div className="slider-arrow right" onClick={nextSlide}><i className="fas fa-chevron-right"></i></div>
        </>
      ) : (
        <div className="slider-placeholder-large" onClick={handleAddClick}>
          <i className="fas fa-camera"></i>
          <span>클릭하여 첫 이미지 추가</span>
        </div>
      )}
      <input type="file" ref={fileInputRef} style={{ display: 'none' }} accept="image/*" onChange={handleFileChange} />
    </div>
  );
};

const ConversationList = ({ 
  pairId,
  conversations, 
  selectedConversationId, 
  onSelectConversation, 
  onAddConversation,
  onEditConversation,
  onDeleteConversation,
  slideImages,
  onSelectSlideImage,
  onAddSlideImage,
  onDeleteSlideImage, 
}) => {
  const [newConversationTitle, setNewConversationTitle] = useState('');
  const [newTags, setNewTags] = useState([]);
  const [tagInput, setTagInput] = useState('');
  const [contextMenu, setContextMenu] = useState({ isOpen: false, position: { x: 0, y: 0 }, convoId: null });

  const handleAddTag = () => { const trimmedTag = tagInput.trim(); if (trimmedTag && !newTags.includes(trimmedTag)) { setNewTags([...newTags, trimmedTag]); setTagInput(''); } };
  const handleTagInputKeyDown = (e) => { if (!e.nativeEvent.isComposing && e.key === 'Enter') { e.preventDefault(); handleAddTag(); } };
  const handleRemoveTag = (tagToRemove) => { setNewTags(newTags.filter(tag => tag !== tagToRemove)); };
  const handleAdd = (e) => {
    e.preventDefault();
    if (newConversationTitle.trim()) {
      onAddConversation(pairId, { title: newConversationTitle.trim(), tags: newTags });
      setNewConversationTitle('');
      setNewTags([]);
      setTagInput('');
    }
  };

  const handleContextMenu = (e, convoId) => { e.preventDefault(); setContextMenu({ isOpen: true, position: { x: e.clientX, y: e.clientY }, convoId }); };
  const handleCloseContextMenu = () => setContextMenu({ ...contextMenu, isOpen: false });
  
  const contextMenuItems = [
    { label: '수정', action: () => onEditConversation(contextMenu.convoId) },
    { isSeparator: true },
    { label: '삭제', className: 'delete', action: () => { if (window.confirm("정말로 이 대화를 삭제하시겠습니까?")) { onDeleteConversation(contextMenu.convoId); } } },
  ];

  return (
    <div className="conversation-list-container">
      <ImageSlider
        images={slideImages}
        onSelect={onSelectSlideImage}
        onAdd={onAddSlideImage}
        onDelete={onDeleteSlideImage}
      />

      <div className="conversation-list-header">
        <form onSubmit={handleAdd} className="add-conversation-form">
          <input
            type="text"
            value={newConversationTitle}
            onChange={(e) => setNewConversationTitle(e.target.value)}
            placeholder="새 로그 제목..."
            required
          />
          <div className="tag-input-area">
            <div className="tag-input-container">
              <input 
                type="text" 
                value={tagInput}
                onChange={(e) => setTagInput(e.target.value)}
                onKeyDown={handleTagInputKeyDown}
                placeholder="태그 입력 후 Enter 또는 추가"
              />
              <button type="button" onClick={handleAddTag} title="태그 추가">
                <i className="fas fa-plus"></i>
              </button>
            </div>
            <div className="tags-preview">
              {(newTags || []).map((tag, index) => (
                <div key={index} className="tag-item-small">
                  {tag}
                  <button type="button" onClick={() => handleRemoveTag(tag)}>&times;</button>
                </div>
              ))}
            </div>
          </div>
          <button type="submit" title="새 로그 추가하기">
            <i className="fas fa-check"></i> 추가하기
          </button>
        </form>
      </div>
      
      <ul className="conversation-list">
        {(conversations || []).map((convo) => (
          <li
            key={convo.id}
            className={`conversation-item ${convo.id === selectedConversationId ? 'selected' : ''}`}
            onClick={() => onSelectConversation(convo.id)}
            onContextMenu={(e) => handleContextMenu(e, convo.id)}
          >
            <span className="conversation-item-title">{convo.title}</span>
            {(convo.tags || []).length > 0 && (
              <div className="conversation-item-tags">
                {(convo.tags || []).map((tag, index) => ( <span key={index} className="tag-pill-small">{tag}</span> ))}
              </div>
            )}
          </li>
        ))}
      </ul>

      {contextMenu.isOpen && ( <ContextMenu position={contextMenu.position} onClose={handleCloseContextMenu} items={contextMenuItems.map(item => ({...item, action: () => { if(item.action) item.action(); handleCloseContextMenu(); }}))} /> )}
    </div>
  );
};

export default ConversationList;


// ======================================================
// File: src\components\ConversationSettingsModal.js
// ======================================================

// 파일: src/components/ConversationSettingsModal.js (새 파일)

import React, { useState, useEffect } from 'react';
import SettingsModal from './SettingsModal';

const ConversationSettingsModal = ({ isOpen, onClose, convoData, onSave }) => {
  const [title, setTitle] = useState('');
  const [tags, setTags] = useState([]);
  const [tagInput, setTagInput] = useState('');

  useEffect(() => {
    if (isOpen && convoData) {
      setTitle(convoData.title || '');
      setTags(convoData.tags || []);
    }
  }, [isOpen, convoData]);

  const handleAddTag = () => {
    const trimmedTag = tagInput.trim();
    if (trimmedTag && !tags.includes(trimmedTag)) {
      setTags([...tags, trimmedTag]);
      setTagInput('');
    }
  };

  const handleTagInputKeyDown = (e) => {
    if (!e.nativeEvent.isComposing && e.key === 'Enter') {
      e.preventDefault();
      handleAddTag();
    }
  };

  const handleRemoveTag = (tagToRemove) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // convoData.id는 필요 없고, title과 tags만 전달합니다.
    onSave({ title, tags });
    onClose();
  };

  return (
    <SettingsModal isOpen={isOpen} onClose={onClose} title="개별 대화 수정">
      <form onSubmit={handleSubmit} className="pair-settings-form">
        <div className="form-group">
          <label htmlFor="convo-title">제목</label>
          <input
            id="convo-title"
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />
        </div>
        <div className="form-group">
          <label>태그</label>
          <div className="tag-input-container">
            <input
              type="text"
              value={tagInput}
              onChange={(e) => setTagInput(e.target.value)}
              onKeyDown={handleTagInputKeyDown}
              placeholder="태그 입력 후 Enter"
            />
            <button type="button" onClick={handleAddTag}>추가</button>
          </div>
          <div className="tags-list">
            {(tags || []).map((tag, index) => (
              <div key={index} className="tag-item">
                {tag}
                <button type="button" className="remove-tag-btn" onClick={() => handleRemoveTag(tag)}>&times;</button>
              </div>
            ))}
          </div>
        </div>
        <button type="submit" className="save-button">저장하기</button>
      </form>
    </SettingsModal>
  );
};

export default ConversationSettingsModal;


// ======================================================
// File: src\components\CustomSlider.js
// ======================================================

// 파일: src/components/CustomSlider.js (새 파일)

import React, { useRef, useEffect } from 'react';

const CustomSlider = ({ min, max, step, value, onChange, ...props }) => {
  const inputRef = useRef(null);

  useEffect(() => {
    const updateSliderProgress = () => {
      if (inputRef.current) {
        const range = parseFloat(max) - parseFloat(min);
        const progress = (parseFloat(value) - parseFloat(min)) / range;
        const percentage = progress * 100;
        inputRef.current.style.setProperty('--slider-progress', `${percentage}%`);
      }
    };
    updateSliderProgress();
  }, [value, min, max]);

  return (
    <input
      ref={inputRef}
      type="range"
      min={min}
      max={max}
      step={step}
      value={value}
      onChange={onChange}
      {...props}
    />
  );
};

export default CustomSlider;


// ======================================================
// File: src\components\Dashboard.js
// ======================================================

// 파일: src/components/Dashboard.js (수정 완료)

import React from 'react';
import ConversationCard from './ConversationCard';

// onContextMenu prop을 추가로 받도록 수정
const Dashboard = ({ logs, onSelectLog, onOpenAddLogModal, bgColor, onContextMenu }) => {
  const dashboardStyle = {
    backgroundColor: bgColor || '#1a1a1a',
  };

  return (
    <main className="dashboard" style={dashboardStyle}>
      <div className="dashboard-grid">
        {logs.map((log) => (
          <ConversationCard
            key={log.id}
            log={log}
            onSelect={onSelectLog}
            // ▼▼▼ NEW ▼▼▼: 우클릭 이벤트를 부모에게 전달
            onContextMenu={(e) => onContextMenu(e, log.id)}
          />
        ))}
        <div className="add-log-card" onClick={onOpenAddLogModal}>
          +
        </div>
      </div>
    </main>
  );
};

export default Dashboard;


// ======================================================
// File: src\components\DataImportModal.js
// ======================================================

// File: src/components/DataImportModal.js

import React, { useState, useRef } from 'react';
import SettingsModal from './SettingsModal';
import * as XLSX from 'xlsx';

const DataImportModal = ({ isOpen, onClose, onImport, characters }) => {
  const [sourceType, setSourceType] = useState('txt');
  const [googleSheetUrl, setGoogleSheetUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const fileInputRef = useRef(null);

  const characterNameMap = {
    me: characters?.me?.[0]?.name || 'A 캐릭터',
    other: characters?.other?.[0]?.name || 'B 캐릭터',
  };

  const resetState = () => {
    setGoogleSheetUrl('');
    setIsLoading(false);
    setError('');
    if (fileInputRef.current) {
      fileInputRef.current.value = null;
    }
  };

  const handleClose = () => {
    resetState();
    onClose();
  };
  
  const createMessageObjects = (parsedData) => {
    if (!parsedData || parsedData.length === 0) {
      throw new Error("파싱된 데이터가 없습니다.");
    }

    return parsedData.map(item => {
      const speakerName = (item.speaker || '').trim();
      const content = (item.content || '').trim();

      if (!content) return null;

      let sender, characterKey;
      if (speakerName === characterNameMap.me) {
        sender = 'Me';
        characterKey = 'me';
      } else if (speakerName === characterNameMap.other) {
        sender = 'Other';
        characterKey = 'other';
      } else {
        sender = 'Other';
        characterKey = 'other';
      }

      const versions = characters[characterKey] || [];
      const characterVersionId = versions.length > 0 ? versions[0].id : null;

      return {
        type: 'text',
        sender,
        content,
        characterVersionId,
      };
    }).filter(Boolean);
  };

  const parseTxtFile = (content) => {
    const lines = content.split('\n').filter(line => line.trim() !== '');
    const regex = /^\[(.+?)\]\s*(.*)$/;
    return lines.map(line => {
      const match = line.match(regex);
      if (match) {
        return { speaker: match[1].trim(), content: match[2].trim() };
      }
      return null;
    }).filter(Boolean);
  };
  
  const parseExcelFile = (data) => {
    const workbook = XLSX.read(data, { type: 'array' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: ['speaker', 'content'], range: 1 });
    return jsonData;
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    setIsLoading(true);
    setError('');
    const reader = new FileReader();

    reader.onload = async (event) => {
      try {
        let parsedData;
        if (file.name.endsWith('.txt')) {
          parsedData = parseTxtFile(event.target.result);
        } else if (file.name.endsWith('.xlsx')) {
          parsedData = parseExcelFile(event.target.result);
        } else {
          throw new Error('지원하지 않는 파일 형식입니다. (.txt 또는 .xlsx)');
        }
        
        const finalMessages = createMessageObjects(parsedData);
        onImport(finalMessages);
      } catch (err) {
        setError(`파일 처리 중 오류 발생: ${err.message}`);
        setIsLoading(false);
      }
    };
    
    reader.onerror = () => {
        setError('파일을 읽는 데 실패했습니다.');
        setIsLoading(false);
    }

    if (file.name.endsWith('.txt')) {
      reader.readAsText(file);
    } else if (file.name.endsWith('.xlsx')) {
      reader.readAsArrayBuffer(file);
    }
  };
  
  const handleGoogleSheetImport = async () => {
    if (!googleSheetUrl.trim()) {
      setError('Google Sheets URL을 입력해주세요.');
      return;
    }
    
    setIsLoading(true);
    setError('');
    
    try {
      const idRegex = /\/d\/([a-zA-Z0-9-_]+)/;
      const gidRegex = /[#&]gid=([0-9]+)/;
      const idMatch = googleSheetUrl.match(idRegex);

      if (!idMatch || !idMatch[1]) {
        throw new Error("유효한 Google Sheets URL이 아닙니다. URL에 '/d/...' 부분이 포함되어 있는지 확인하세요.");
      }
      const sheetId = idMatch[1];
      const gidMatch = googleSheetUrl.match(gidRegex);
      const gid = gidMatch && gidMatch[1] ? gidMatch[1] : '0';

      const csvUrl = `https://docs.google.com/spreadsheets/d/${sheetId}/export?format=csv&gid=${gid}`;
      
      const csvText = await window.electronAPI.fetchGoogleSheet(csvUrl);

      if (!csvText) {
          throw new Error("Google Sheets에서 데이터를 받아오지 못했습니다. 비어있는 시트가 아닌지 확인해주세요.");
      }
      
      const lines = csvText.trim().split('\n').slice(1);
      const parsedData = lines.map(line => {
        const columns = [];
        let current = '';
        let inQuotes = false;
        for (const char of line) {
            if (char === '"' && (current === '' || current.slice(-1) !== '\\')) {
                inQuotes = !inQuotes;
            } else if (char === ',' && !inQuotes) {
                columns.push(current);
                current = '';
            } else {
                current += char;
            }
        }
        columns.push(current);

        return {
          speaker: (columns[0] || '').trim().replace(/^"|"$/g, '').replace(/\r$/, ''),
          content: (columns[1] || '').trim().replace(/^"|"$/g, '').replace(/\r$/, '')
        };
      }).filter(item => item.speaker && item.content);
      
      const finalMessages = createMessageObjects(parsedData);
      onImport(finalMessages);

    } catch (err) {
      setError(`Google Sheets 처리 중 오류 발생: ${err.message}. 시트가 '링크가 있는 모든 사용자'에게 공개되어 있는지 확인하세요.`);
      setIsLoading(false);
    }
  };

  return (
    <>
      <SettingsModal isOpen={isOpen} onClose={handleClose} title="데이터 불러오기">
        <div className="data-import-modal utility-panel">
          <div className="import-source-tabs">
            <button className={sourceType === 'txt' ? 'active' : ''} onClick={() => setSourceType('txt')}>TXT 파일</button>
            <button className={sourceType === 'excel' ? 'active' : ''} onClick={() => setSourceType('excel')}>Excel 파일</button>
            <button className={sourceType === 'google' ? 'active' : ''} onClick={() => setSourceType('google')}>Google Sheets</button>
            {/* [제거 완료] 트위터 탭 버튼이 삭제되었습니다. */}
          </div>

          {sourceType === 'txt' && (
            <div className="import-content form-card">
              <p className="import-instruction">
                `[화자명] 내용` 형식의 텍스트 파일을 선택하세요.<br/>
                예: `[{characterNameMap.me}] 안녕하세요.`
              </p>
              <button className="btn-secondary" onClick={() => fileInputRef.current.click()} disabled={isLoading}>
                TXT 파일 선택...
              </button>
              <input type="file" ref={fileInputRef} style={{ display: 'none' }} accept=".txt" onChange={handleFileChange} />
            </div>
          )}

          {sourceType === 'excel' && (
            <div className="import-content form-card">
              <p className="import-instruction">
                첫 번째 행은 헤더(제목)입니다. A열에는 화자 이름, B열에는 내용이 있는 Excel(.xlsx) 파일을 선택하세요.
              </p>
              <button className="btn-secondary" onClick={() => fileInputRef.current.click()} disabled={isLoading}>
                Excel 파일 선택...
              </button>
              <input type="file" ref={fileInputRef} style={{ display: 'none' }} accept=".xlsx" onChange={handleFileChange} />
            </div>
          )}
          
          {sourceType === 'google' && (
            <div className="import-content form-card">
              <p className="import-instruction">
                1. Google 스프레드시트 우상단 **[공유]** 버튼 클릭<br/>
                2. 일반 액세스 설정을 **'링크가 있는 모든 사용자'**로 변경<br/>
                3. **[링크 복사]**를 눌러 나온 주소를 아래에 붙여넣으세요.
              </p>
              <input
                type="text"
                placeholder="Google Sheets 공유 링크"
                value={googleSheetUrl}
                onChange={(e) => setGoogleSheetUrl(e.target.value)}
                disabled={isLoading}
              />
              <button className="btn-primary" onClick={handleGoogleSheetImport} disabled={isLoading}>
                불러오기
              </button>
            </div>
          )}

          {/* [제거 완료] 트위터 관련 UI가 모두 삭제되었습니다. */}

          {isLoading && <div className="import-status">데이터를 불러오는 중...</div>}
          {error && <div className="import-status error">{error}</div>}
        </div>
      </SettingsModal>
    </>
  );
};

export default DataImportModal;


// ======================================================
// File: src\components\ImageCropModal.js
// ======================================================

// 파일: src/components/ImageCropModal.js

import React, { useRef } from 'react';
import Cropper from 'react-cropper';
import SettingsModal from './SettingsModal';

// outputWidth prop을 추가로 받습니다.
const ImageCropModal = ({ isOpen, onClose, imageSrc, onCropComplete, aspectRatio = 16 / 9, outputWidth }) => {
  const cropperRef = useRef(null);

  const handleCrop = () => {
    const cropper = cropperRef.current?.cropper;
    if (typeof cropper !== 'undefined') {
      // --- ▼▼▼ 핵심 변경 부분 ▼▼▼ ---
      const options = {
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high',
      };

      // outputWidth prop이 전달되었다면, 결과물 캔버스의 너비를 고정합니다.
      if (outputWidth) {
        options.width = outputWidth;
        // 높이는 Cropper가 가로세로 비율(aspectRatio)에 맞춰 자동으로 계산해줍니다.
      }
      
      // getCroppedCanvas에 옵션을 전달합니다.
      const canvas = cropper.getCroppedCanvas(options);

      // toDataURL을 사용하여 이미지 퀄리티를 지정하여 용량을 최적화할 수 있습니다. (JPEG, 90% 품질)
      const croppedDataUrl = canvas.toDataURL('image/jpeg', 0.9);
      // --- ▲▲▲ 핵심 변경 부분 ▲▲▲ ---
      
      onCropComplete(croppedDataUrl);
      onClose();
    }
  };

  return (
    <SettingsModal
      isOpen={isOpen}
      onClose={onClose}
      title="이미지 편집"
      customContentClass="image-crop-modal-content"
    >
      <div className="crop-container">
        {imageSrc ? (
          <Cropper
            key={imageSrc}
            ref={cropperRef}
            src={imageSrc}
            style={{ height: '100%', width: '100%' }}
            aspectRatio={aspectRatio}
            guides={true}
            viewMode={1}
            background={false}
            responsive={true}
            autoCropArea={1}
            checkOrientation={false}
          />
        ) : (
          <div className="crop-placeholder"><p>이미지를 불러오는 중...</p></div>
        )}
      </div>
      <button className="crop-button" onClick={handleCrop}>자르기 및 저장</button>
    </SettingsModal>
  );
};

export default ImageCropModal;


// ======================================================
// File: src\components\IndexedDBImage.js
// ======================================================

// 파일: src/components/IndexedDBImage.js (수정 완료)

import React, { useState, useEffect } from 'react';
import { db } from '../db';

const IndexedDBImage = ({ imageId, onUrlLoad, ...props }) => {
  const [imageUrl, setImageUrl] = useState('');

  useEffect(() => {
    let objectUrl = null;

    const loadImage = async () => {
      if (!imageId) {
        setImageUrl('');
        if (onUrlLoad) onUrlLoad(null); // imageId가 없으면 URL도 null
        return;
      }

      try {
        const imageRecord = await db.images.get(imageId);
        if (imageRecord && imageRecord.data) {
          objectUrl = URL.createObjectURL(imageRecord.data);
          setImageUrl(objectUrl);
          // ▼▼▼ [핵심] 로드된 URL을 부모 컴포넌트로 전달 ▼▼▼
          if (onUrlLoad) {
            onUrlLoad(objectUrl);
          }
        }
      } catch (error) {
        console.error(`Failed to load image (id: ${imageId}) from IndexedDB`, error);
      }
    };

    loadImage();

    return () => {
      if (objectUrl) {
        URL.revokeObjectURL(objectUrl);
      }
    };
  }, [imageId, onUrlLoad]); // onUrlLoad를 의존성 배열에 추가

  if (!imageUrl) {
    // ▼▼▼ [핵심] ...props를 전달하여 style 등이 적용되도록 함 ▼▼▼
    return <div className={`${props.className} image-loading-placeholder`} {...props}></div>;
  }

  // ▼▼▼ [핵심] ...props를 img 태그에 전달하여 style 등이 적용되도록 함 ▼▼▼
  return (
    <img src={imageUrl} alt={`db-img-${imageId}`} {...props} />
  );
};

export default IndexedDBImage;


// ======================================================
// File: src\components\IndexedDBVideo.js
// ======================================================

// 파일: src/components/IndexedDBVideo.js (새 파일)

import React, { useState, useEffect } from 'react';
import { db } from '../db';

const IndexedDBVideo = ({ videoId, className, ...props }) => {
  const [videoUrl, setVideoUrl] = useState('');

  useEffect(() => {
    let objectUrl = null;

    const loadVideo = async () => {
      if (!videoId) {
        setVideoUrl('');
        return;
      }
      try {
        const videoRecord = await db.images.get(videoId);
        if (videoRecord && videoRecord.data) {
          objectUrl = URL.createObjectURL(videoRecord.data);
          setVideoUrl(objectUrl);
        }
      } catch (error) {
        console.error(`Failed to load video (id: ${videoId}) from IndexedDB`, error);
      }
    };

    loadVideo();

    return () => {
      if (objectUrl) {
        URL.revokeObjectURL(objectUrl);
      }
    };
  }, [videoId]);

  if (!videoUrl) {
    return <div className={`${className} media-loading-placeholder`}>비디오 로딩 중...</div>;
  }

  return (
    <video src={videoUrl} className={className} controls {...props} />
  );
};

export default IndexedDBVideo;


// ======================================================
// File: src\components\InputDialog.js
// ======================================================

// File: src/components/InputDialog.js (수정 완료)

import React, { useState, useEffect } from 'react';
import SettingsModal from './SettingsModal';

// ▼▼▼ [핵심 수정] fields prop에 기본값으로 빈 배열([])을 할당하여 오류를 방지합니다. ▼▼▼
const InputDialog = ({ isOpen, title, fields = [], initialData, onConfirm, onCancel }) => {
  const [formState, setFormState] = useState({});

  useEffect(() => {
    if (isOpen) {
      // initialData prop으로 상태를 초기화합니다.
      setFormState(initialData || {});
    }
  }, [isOpen, initialData]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    const newFormState = { ...formState, [name]: value };
    
    // sender가 변경되면, 해당 캐릭터의 첫 번째 버전 ID를 자동으로 설정
    if (name === 'sender') {
      const fieldWithOptions = fields.find(f => f.name === 'characterVersionId');
      if (fieldWithOptions && fieldWithOptions.options.length > 0) {
        // 이 로직은 Workspace의 useEffect로 대체되었으므로, 여기서는 단순 상태 업데이트만 수행합니다.
        // Workspace에서 sender 변경을 감지하고 fields를 다시 내려주면,
        // 아래의 useEffect가 characterVersionId를 올바르게 설정합니다.
      }
    }
    setFormState(newFormState);
  };
  
  // 필드(특히 버전 옵션)가 변경되면 formState의 버전 ID를 유효한 값으로 업데이트
  useEffect(() => {
    if (isOpen) {
      const versionField = fields.find(f => f.name === 'characterVersionId');
      if (versionField) {
        const currentVersionId = formState.characterVersionId;
        const availableVersionIds = versionField.options.map(opt => opt.value);
        if (!availableVersionIds.includes(currentVersionId)) {
          setFormState(prev => ({ ...prev, characterVersionId: availableVersionIds[0] || null }));
        }
      }
    }
  }, [isOpen, fields, formState.characterVersionId]);


  const handleConfirm = (e) => {
    e.preventDefault();
    onConfirm(formState);
  };

  const handleCancel = () => {
    onCancel();
  };

  return (
    <SettingsModal isOpen={isOpen} onClose={handleCancel} title={title}>
      <form onSubmit={handleConfirm} className="input-dialog-form utility-panel">
        {fields.map(field => (
          <div key={field.name} className="form-card">
            <label htmlFor={field.name} className="card-label">{field.label}</label>
            {field.type === 'textarea' ? (
              <textarea
                id={field.name}
                name={field.name}
                value={formState[field.name] || ''}
                onChange={handleChange}
                placeholder={field.placeholder}
                rows="3"
                required
              />
            ) : field.type === 'select' ? (
              <select
                id={field.name}
                name={field.name}
                value={formState[field.name] || ''}
                onChange={handleChange}
              >
                {(field.options || []).map(opt => (
                  <option key={opt.value} value={opt.value}>{opt.label}</option>
                ))}
              </select>
            ) : (
              <input
                type={field.type || 'text'}
                id={field.name}
                name={field.name}
                value={formState[field.name] || ''}
                onChange={handleChange}
                placeholder={field.placeholder}
                required
              />
            )}
          </div>
        ))}
        <div className="dialog-buttons">
          <button type="button" className="btn-secondary" onClick={handleCancel}>취소</button>
          <button type="submit" className="btn-primary">확인</button>
        </div>
      </form>
    </SettingsModal>
  );
};

export default InputDialog;


// ======================================================
// File: src\components\Message.js
// ======================================================

// File: src/components/Message.js (수정 완료)

import React from 'react';
import IndexedDBImage from './IndexedDBImage';
import IndexedDBVideo from './IndexedDBVideo';

// ▼▼▼ [수정] character prop 대신 characters (버전 배열)와 versionId를 받습니다.
const Message = ({ message, characters, versionId, onContextMenu, onAvatarClick }) => {
  const isMe = message.sender === 'Me' || message.sender === 'me';
  const rowClassName = `message-row ${isMe ? 'me' : 'other'}`;
  
  // ▼▼▼ [수정] versionId에 해당하는 캐릭터 프로필을 찾습니다. 없으면 첫 번째 버전을 사용합니다.
  const character = (Array.isArray(characters) && characters.find(v => v.id === versionId)) || (Array.isArray(characters) ? characters[0] : null);

  const handleContextMenu = (e) => {
    e.preventDefault();
    onContextMenu(e, message.id);
  };
  
  const handleAvatarClick = (e) => {
    e.stopPropagation();
    if (onAvatarClick && character) { // character가 유효할 때만 호출
      onAvatarClick(character, e.currentTarget);
    }
  };

  const renderMessageContent = () => {
    switch (message.type) {
      case 'image':
        return <IndexedDBImage imageId={message.content} className="message-media" />;
      case 'video':
        return <IndexedDBVideo videoId={message.content} className="message-media" />;
      
      case 'embed':
        const { service, embedUrl } = message.content;
        return (
          <div className={`embed-container ${service}`}>
            <iframe
              src={embedUrl}
              width="100%"
              height="100%"
              style={{ border: 'none' }}
              allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
              allowFullScreen
              loading="lazy"
              title={`${service} embed`}
            ></iframe>
          </div>
        );
      
      case 'link':
        const { url, service: linkService, title, description, image } = message.content;
        const handleOpenLink = (e) => {
          e.preventDefault();
          window.open(url, '_blank', 'noopener,noreferrer');
        };
        return (
          <a href={url} onClick={handleOpenLink} className="link-preview-card" target="_blank" rel="noopener noreferrer">
            {image && <img src={image} alt={title} className="link-preview-image" />}
            <div className="link-preview-content">
              <div className="link-preview-title">{title}</div>
              <div className="link-preview-description">{description}</div>
              <div className="link-preview-service">{linkService}</div>
            </div>
          </a>
        );

      case 'text':
      default:
        const textToRender = typeof message.content === 'string' ? message.content : (message.text || '');
        return <div className="message-text" dangerouslySetInnerHTML={{ __html: textToRender }}></div>;
    }
  };
  
  const isMedia = ['image', 'video', 'embed', 'link'].includes(message.type);
  const bubbleClassName = `message-bubble ${isMe ? 'me' : 'other'} ${isMedia ? 'media' : ''}`;

  return (
    <div className={rowClassName} id={`message-${message.id}`}>
      <div className="message-avatar-container" onClick={handleAvatarClick}>
        {character && character.avatar && (
          <IndexedDBImage imageId={character.avatar} className="message-avatar" />
        )}
      </div>
      <div className="message-content-container">
        {character && character.name && (
          <div className="message-sender-name">{character.name}</div>
        )}
        <div className="message-bubble-container">
          <div className={bubbleClassName} onContextMenu={handleContextMenu}>
            {renderMessageContent()}
            {message.bookmarked && <i className="fas fa-bookmark message-bookmark-icon"></i>}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Message;


// ======================================================
// File: src\components\MessageView.js
// ======================================================

// File: src/components/MessageView.js (수정 완료)

import React, { useState, useEffect, useRef } from 'react';
import Message from './Message';
import Sticker from './Sticker';
import TiptapEditor from './TiptapEditor';
import StickerEffectsModal from './StickerEffectsModal';

const MessageView = ({ log, characters, onAddMessage, onMessageContextMenu, onUpdateStickers, onAvatarClick, scrollToMessageId, onScrollComplete, onSetComment }) => {
  const [sender, setSender] = useState('me');
  const [text, setText] = useState('');
  const [selectedStickerId, setSelectedStickerId] = useState(null);
  const messageListRef = useRef(null);
  const fileInputRef = useRef(null);
  
  // ▼▼▼ [신규] 프로필 버전 선택을 위한 상태 ▼▼▼
  const [selectedVersion, setSelectedVersion] = useState({ me: null, other: null });

  const [isFxModalOpen, setIsFxModalOpen] = useState(false);
  const [editingSticker, setEditingSticker] = useState(null);
  const originalStickerData = useRef(null);

  // ▼▼▼ [수정] 캐릭터 데이터가 변경되면 선택된 버전을 초기화 ▼▼▼
  useEffect(() => {
    if (characters) {
      const meVersions = Array.isArray(characters.me) ? characters.me : [];
      const otherVersions = Array.isArray(characters.other) ? characters.other : [];
      setSelectedVersion({
        me: meVersions.length > 0 ? meVersions[0].id : null,
        other: otherVersions.length > 0 ? otherVersions[0].id : null,
      });
    }
  }, [characters]);


  useEffect(() => { if (messageListRef.current) { messageListRef.current.scrollTop = messageListRef.current.scrollHeight; } }, [log.messages]);
  useEffect(() => { if (scrollToMessageId && messageListRef.current) { const targetElement = messageListRef.current.querySelector(`#message-${scrollToMessageId}`); if (targetElement) { targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' }); targetElement.classList.add('highlighted'); setTimeout(() => { targetElement.classList.remove('highlighted'); }, 1500); } onScrollComplete(); } }, [scrollToMessageId, onScrollComplete]);
  
  const handleAddMessage = (e) => { 
    e.preventDefault(); 
    const tempDiv = document.createElement('div'); 
    tempDiv.innerHTML = text; 
    if (tempDiv.textContent.trim()) { 
      const formattedSender = sender === 'me' ? 'Me' : 'Other'; 
      // ▼▼▼ [수정] 메시지 데이터에 characterVersionId 추가 ▼▼▼
      const versionId = selectedVersion[sender];
      onAddMessage({ type: 'text', sender: formattedSender, text, characterVersionId: versionId }); 
      setText(''); 
    } 
  };
  
  const handleFileChange = (e) => { 
    const file = e.target.files[0]; 
    if (file) { 
      const formattedSender = sender === 'me' ? 'Me' : 'Other'; 
      // ▼▼▼ [수정] 파일 메시지에도 characterVersionId 추가 ▼▼▼
      const versionId = selectedVersion[sender];
      onAddMessage({ type: 'file', sender: formattedSender, file, characterVersionId: versionId }); 
    } 
    e.target.value = null; 
  };
  
  const handleBackgroundClick = (e) => { if (e.target === e.currentTarget) { setSelectedStickerId(null); } };
  const handleStickerUpdate = (updatedSticker) => { const newStickers = (log.stickers || []).map(s => s.id === updatedSticker.id ? updatedSticker : s); onUpdateStickers(newStickers); };
  const handleStickerDelete = (stickerIdToDelete) => { const newStickers = (log.stickers || []).filter(s => s.id !== stickerIdToDelete); onUpdateStickers(newStickers); };


  const handleOpenFxModal = (sticker) => {
    originalStickerData.current = sticker;
    setEditingSticker(sticker);
    setIsFxModalOpen(true);
  };

  const handleCloseFxModal = () => {
    if (originalStickerData.current) {
        handleStickerUpdate(originalStickerData.current);
    }
    setIsFxModalOpen(false);
    setEditingSticker(null);
    originalStickerData.current = null;
  };

  const handleSaveFx = (updatedEffects) => {
    if (!editingSticker) return;
    const finalSticker = { ...editingSticker, effects: updatedEffects };
    handleStickerUpdate(finalSticker);
    
    setIsFxModalOpen(false);
    setEditingSticker(null);
    originalStickerData.current = null;
  };
  
  const handleStickerLiveUpdate = (liveEffects) => {
    if (!editingSticker) return;
    setEditingSticker(prevSticker => ({
      ...prevSticker,
      effects: liveEffects
    }));
  };

  if (!log || !characters) return null;

  const stickersToRender = (log.stickers || []).map(sticker => {
      if (editingSticker && sticker.id === editingSticker.id) {
          return editingSticker;
      }
      return sticker;
  });
  
  // ▼▼▼ [신규] 렌더링에 필요한 캐릭터 버전 목록 ▼▼▼
  const meVersions = Array.isArray(characters.me) ? characters.me : [];
  const otherVersions = Array.isArray(characters.other) ? characters.other : [];

  return (
    <>
      <div className="message-view-content">
        <div className="message-list" ref={messageListRef} onClick={handleBackgroundClick}>
          {(log.messages || []).map((msg) => {
            // ▼▼▼ [수정] Message 컴포넌트에 올바른 props 전달 ▼▼▼
            const isMe = msg.sender === 'Me' || msg.sender === 'me';
            const characterVersions = isMe ? meVersions : otherVersions;
            return <Message 
              key={msg.id} 
              message={msg} 
              characters={characterVersions} 
              versionId={msg.characterVersionId}
              onContextMenu={onMessageContextMenu} 
              onAvatarClick={onAvatarClick} 
            />;
          })}
          
          {stickersToRender.map((sticker) => (
            <Sticker 
              key={sticker.id} 
              stickerData={sticker} 
              onUpdate={handleStickerUpdate} 
              onDelete={handleStickerDelete}
              isSelected={sticker.id === selectedStickerId} 
              onSelect={setSelectedStickerId}
              onOpenFxModal={handleOpenFxModal}
            />
          ))}
        </div>
      </div>
      
      <form onSubmit={handleAddMessage} className="add-message-form">
        <div className="sender-selector-group">
          <select value={sender} onChange={(e) => setSender(e.target.value)}>
            <option value="me">{meVersions[0]?.name || 'A 캐릭터'}</option>
            <option value="other">{otherVersions[0]?.name || 'B 캐릭터'}</option>
          </select>
          {/* ▼▼▼ [신규] 프로필 버전 선택 드롭다운 ▼▼▼ */}
          <select 
            value={selectedVersion[sender] || ''} 
            onChange={(e) => setSelectedVersion(prev => ({...prev, [sender]: e.target.value}))}
            className="version-selector"
          >
            {(sender === 'me' ? meVersions : otherVersions).map(v => (
              <option key={v.id} value={v.id}>{v.name}</option>
            ))}
          </select>
        </div>
        <button type="button" className="attach-file-btn" title="파일 첨부" onClick={() => fileInputRef.current.click()}> <i className="fas fa-paperclip"></i> </button>
        <div className="editor-container"> <TiptapEditor content={text} onUpdate={setText} placeholder="메시지 입력..." onSetComment={onSetComment}/> </div>
        <button type="submit">전송</button>
      </form>
      {/* ▼▼▼ [수정] 파일 첨부 시 GIF 포함 ▼▼▼ */}
      <input type="file" ref={fileInputRef} style={{ display: 'none' }} accept="image/*,video/*,image/gif" onChange={handleFileChange} />

      <StickerEffectsModal 
        isOpen={isFxModalOpen}
        onClose={handleCloseFxModal}
        stickerData={originalStickerData.current}
        onSave={handleSaveFx}
        onLiveUpdate={handleStickerLiveUpdate}
      />
    </>
  );
};

export default MessageView;


// ======================================================
// File: src\components\PairSettingsModal.js
// ======================================================

// 파일: src/components/PairSettingsModal.js (수정 완료)

import React, { useState, useEffect } from 'react';
import SettingsModal from './SettingsModal';

const PairSettingsModal = ({ isOpen, onClose, pairData, onSave }) => {
  const [title, setTitle] = useState('');
  const [tags, setTags] = useState([]);
  const [tagInput, setTagInput] = useState('');

  useEffect(() => {
    if (isOpen && pairData) {
      setTitle(pairData.title || '');
      setTags(pairData.tags || []);
    }
  }, [isOpen, pairData]);

  const handleAddTag = () => {
    const trimmedTag = tagInput.trim();
    if (trimmedTag && !tags.includes(trimmedTag)) {
      setTags([...tags, trimmedTag]);
      setTagInput('');
    }
  };

  const handleTagInputKeyDown = (e) => {
    if (!e.nativeEvent.isComposing && e.key === 'Enter') {
      e.preventDefault();
      handleAddTag();
    }
  };

  const handleRemoveTag = (tagToRemove) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave({ title, tags });
    onClose();
  };

  return (
    <SettingsModal isOpen={isOpen} onClose={onClose} title="로그 정보 수정">
      {/* ▼▼▼ [핵심 수정] utility-panel 클래스를 적용하여 일관된 폼 레이아웃을 만듭니다. ▼▼▼ */}
      <form onSubmit={handleSubmit} className="utility-panel">
        <div className="form-card">
          <label htmlFor="pair-title" className="card-label">제목</label>
          <input
            id="pair-title"
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
          />
        </div>
        <div className="form-card">
          <label className="card-label">태그</label>
          <div className="tag-input-container">
            <input
              type="text"
              value={tagInput}
              onChange={(e) => setTagInput(e.target.value)}
              onKeyDown={handleTagInputKeyDown}
              placeholder="태그 입력 후 Enter 또는 추가"
            />
            <button type="button" onClick={handleAddTag}>+</button>
          </div>
          <div className="tags-list">
            {(tags || []).map((tag, index) => (
              <div key={index} className="tag-item">
                {tag}
                <button type="button" onClick={() => handleRemoveTag(tag)}>&times;</button>
              </div>
            ))}
          </div>
        </div>
        {/* ▼▼▼ [핵심 수정] 버튼에 btn-primary 클래스를 적용합니다. ▼▼▼ */}
        <button type="submit" className="btn-primary">저장하기</button>
      </form>
    </SettingsModal>
  );
};

export default PairSettingsModal;


// ======================================================
// File: src\components\ProfilePopover.js
// ======================================================

// File: src/components/ProfilePopover.js (수정 완료)

import React, { useEffect, useRef, useState } from 'react';
import IndexedDBImage from './IndexedDBImage';

const ProfilePopover = ({ character, anchorEl, onClose }) => {
  const popoverRef = useRef(null);
  const [position, setPosition] = useState({ top: 0, left: 0 });

  useEffect(() => {
    const handleClickOutside = (event) => {
      if (popoverRef.current && !popoverRef.current.contains(event.target)) {
        onClose();
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [onClose]);

  useEffect(() => {
    if (anchorEl && popoverRef.current) {
      const anchorRect = anchorEl.getBoundingClientRect();
      const popoverRect = popoverRef.current.getBoundingClientRect();
      
      let top = anchorRect.top;
      let left = anchorRect.right + 12;

      if (left + popoverRect.width > window.innerWidth) {
        left = anchorRect.left - popoverRect.width - 12;
      }
      
      if (top + popoverRect.height > window.innerHeight) {
        top = window.innerHeight - popoverRect.height - 12;
      }
      if (top < 0) {
        top = 12;
      }

      setPosition({ top, left });
    }
  }, [anchorEl]);

  if (!character || !character.id) return null; // ▼▼▼ [수정] character.id 유무도 확인

  const headerStyle = {
    background: character.headerColor2
      ? `linear-gradient(to right, ${character.headerColor1}, ${character.headerColor2})`
      : character.headerColor1,
  };

  return (
    <div
      ref={popoverRef}
      className="profile-popover"
      style={{ top: position.top, left: position.left, opacity: position.top > 0 ? 1 : 0 }}
    >
      <div className="popover-banner">
        <div className="popover-header" style={headerStyle}></div>
        {character.profileBanner && <IndexedDBImage imageId={character.profileBanner} />}
      </div>
      <div className="popover-avatar-wrapper">
        <div className="popover-avatar">
          {character.avatar && <IndexedDBImage imageId={character.avatar} />}
        </div>
      </div>
      <div className="popover-content">
        <div className="popover-names">
          {/* ▼▼▼ [수정] 표시 이름을 버전 이름(name)으로 변경 ▼▼▼ */}
          <span className="popover-display-name">{character.name}</span>
          <span className="popover-username">{character.username}</span>
        </div>
        {character.statusMessage && (
          <div className="popover-status">
            <i className="fas fa-comment-dots"></i>
            <span>{character.statusMessage}</span>
          </div>
        )}
        {(character.memo || (character.tags && character.tags.length > 0)) && (
          <div className="popover-divider"></div>
        )}
        {character.memo && (
          <div className="popover-memo">
            <h4>메모</h4>
            <p>{character.memo}</p>
          </div>
        )}
        {character.tags && character.tags.length > 0 && (
          <div className="popover-tags">
            {(character.tags || []).map((tag, index) => (
              <span key={index} className="popover-tag-pill">{tag}</span>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default ProfilePopover;


// ======================================================
// File: src\components\RichTextEditModal.js
// ======================================================

// File: src/components/RichTextEditModal.js (수정 완료)

import React, { useState, useEffect } from 'react';
import SettingsModal from './SettingsModal';
import TiptapEditor from './TiptapEditor';
import InputDialog from './InputDialog';
import { getMarkAttributes } from '@tiptap/core';

const RichTextEditModal = ({ isOpen, onClose, onSave, initialContent, initialSender, initialVersionId, characters }) => {
  const [content, setContent] = useState('');
  const [sender, setSender] = useState('Me');
  const [characterVersionId, setCharacterVersionId] = useState(null); // ▼▼▼ [신규] 버전 ID 상태

  const [commentDialog, setCommentDialog] = useState({
    isOpen: false,
    editor: null,
    defaultValue: '',
  });

  useEffect(() => {
    if (isOpen) {
      setContent(initialContent || '');
      const currentSender = initialSender || 'Me';
      setSender(currentSender);

      // ▼▼▼ [수정] 초기 버전 ID 설정 로직
      const characterKey = currentSender === 'Me' ? 'me' : 'other';
      const versions = characters[characterKey] || [];
      // 초기 버전 ID가 유효하면 사용하고, 아니면 해당 캐릭터의 첫 번째 버전을 기본값으로 설정
      const validInitialVersionId = versions.some(v => v.id === initialVersionId)
        ? initialVersionId
        : (versions[0]?.id || null);
      setCharacterVersionId(validInitialVersionId);
    }
  }, [isOpen, initialContent, initialSender, initialVersionId, characters]);

  // ▼▼▼ [신규] 화자가 변경될 때, 해당 화자의 첫 번째 버전을 기본으로 선택
  useEffect(() => {
    if (!isOpen) return;
    const characterKey = sender === 'Me' ? 'me' : 'other';
    const versions = characters[characterKey] || [];
    setCharacterVersionId(versions[0]?.id || null);
  }, [sender, isOpen, characters]);

  const handleSave = () => {
    onSave({ content, sender, characterVersionId }); // ▼▼▼ [수정] 버전 ID도 함께 저장
    onClose();
  };

  const handleSetComment = (editor) => {
    const existingComment = getMarkAttributes(editor.state, 'comment').comment || '';
    setCommentDialog({
      isOpen: true,
      editor: editor,
      defaultValue: existingComment,
    });
  };

  const handleCloseCommentDialog = () => {
    setCommentDialog({ isOpen: false, editor: null, defaultValue: '' });
  };
  
  const handleConfirmComment = (formData) => {
    const { editor } = commentDialog;
    const commentText = formData.comment.trim();
    if (editor && commentText) {
      editor.chain().focus().setComment({ comment: commentText }).run();
    } else if (editor) {
      editor.chain().focus().unsetComment().run();
    }
    handleCloseCommentDialog();
  };
  
  const isCharactersValid = characters && characters.me && characters.other;
  const versionsForSelectedSender = characters ? (sender === 'Me' ? characters.me : characters.other) : [];

  return (
    <>
      <SettingsModal isOpen={isOpen} onClose={onClose} title="메시지 수정">
        <div className="rich-text-edit-container">
          
          {isCharactersValid && (
            <div className="form-group-row">
              <div className="form-group">
                <label>화자</label>
                <select value={sender} onChange={(e) => setSender(e.target.value)}>
                  <option value="Me">{characters.me[0]?.name || 'A 캐릭터'}</option>
                  <option value="Other">{characters.other[0]?.name || 'B 캐릭터'}</option>
                </select>
              </div>
              {/* ▼▼▼ [신규] 버전 선택 드롭다운 ▼▼▼ */}
              <div className="form-group">
                <label>프로필 버전</label>
                <select value={characterVersionId || ''} onChange={(e) => setCharacterVersionId(e.target.value)}>
                  {(versionsForSelectedSender || []).map(v => (
                    <option key={v.id} value={v.id}>{v.name}</option>
                  ))}
                </select>
              </div>
            </div>
          )}
          
          <TiptapEditor
            content={content}
            onUpdate={setContent}
            onSetComment={handleSetComment}
          />
          <div className="dialog-buttons">
            <button type="button" className="btn-secondary" onClick={onClose}>취소</button>
            <button type="button" className="btn-primary" onClick={handleSave}>저장</button>
          </div>
        </div>
      </SettingsModal>
      
      <InputDialog
        isOpen={commentDialog.isOpen}
        title="주석 추가/수정"
        fields={[
          {
            name: 'comment',
            label: '주석 내용',
            type: 'textarea',
            placeholder: '표시할 주석을 입력하세요...',
            defaultValue: commentDialog.defaultValue,
          },
        ]}
        onConfirm={handleConfirmComment}
        onCancel={handleCloseCommentDialog}
      />
    </>
  );
};

export default RichTextEditModal;


// ======================================================
// File: src\components\SettingsModal.js
// ======================================================

// 파일: src/components/SettingsModal.js (드래그 기능 추가 완료)

import React, { useState, useRef, useEffect } from 'react';

const SettingsModal = ({ isOpen, onClose, title, children, customContentClass = '' }) => {
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const [isDragging, setIsDragging] = useState(false);
  
  const modalRef = useRef(null);
  const dragStartPos = useRef({ x: 0, y: 0 });
  const initialModalPos = useRef({ x: 0, y: 0 });

  // 모달이 열릴 때마다 위치를 중앙으로 초기화합니다.
  useEffect(() => {
    if (isOpen) {
      setPosition({ x: 0, y: 0 });
    }
  }, [isOpen]);
  
  // 드래그 상태에 따라 window에 이벤트 리스너를 추가/제거합니다.
  useEffect(() => {
    const handleMouseMove = (e) => {
      // 시작점으로부터의 마우스 이동 거리를 계산합니다.
      const dx = e.clientX - dragStartPos.current.x;
      const dy = e.clientY - dragStartPos.current.y;
      // 초기 모달 위치에 이동 거리를 더해 새 위치를 설정합니다.
      setPosition({
        x: initialModalPos.current.x + dx,
        y: initialModalPos.current.y + dy,
      });
    };

    const handleMouseUp = () => {
      setIsDragging(false);
    };
    
    if (isDragging) {
      document.body.classList.add('is-dragging'); // 텍스트 선택 방지
      window.addEventListener('mousemove', handleMouseMove);
      window.addEventListener('mouseup', handleMouseUp, { once: true }); // 한번 실행 후 자동 제거
    }
    
    return () => {
      document.body.classList.remove('is-dragging');
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', handleMouseUp);
    };
  }, [isDragging]);

  const handleMouseDown = (e) => {
    // 닫기 버튼이나 다른 컨트롤이 아닌 헤더 자체를 클릭했을 때만 드래그 시작
    if (e.target === e.currentTarget) {
        e.preventDefault();
        setIsDragging(true);
        // 드래그 시작 시점의 마우스 위치와 모달 위치를 기록합니다.
        dragStartPos.current = { x: e.clientX, y: e.clientY };
        initialModalPos.current = { x: position.x, y: position.y };
    }
  };

  if (!isOpen) {
    return null;
  }
  
  // 모달의 위치를 transform으로 적용합니다.
  const modalStyle = {
    transform: `translate(${position.x}px, ${position.y}px)`,
  };

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div 
        ref={modalRef}
        className={`modal-content ${customContentClass}`} 
        style={modalStyle}
        onClick={(e) => e.stopPropagation()}
      >
        <div 
          className="modal-header is-draggable" // 드래그 핸들임을 나타내는 클래스 추가
          onMouseDown={handleMouseDown}
        >
          <h2>{title}</h2>
          <button className="modal-close-btn" onClick={onClose}>
            &times;
          </button>
        </div>
        <div className="modal-body">
          {children}
        </div>
      </div>
    </div>
  );
};

export default SettingsModal;


// ======================================================
// File: src\components\SettingsPanel.js
// ======================================================

// 파일: src/components/SettingsPanel.js (수정 완료)

import React from 'react';
import ThemeEditor from './ThemeEditor';
import CustomSlider from './CustomSlider'; // ▼▼▼ CustomSlider import

const globalThemeOptions = [
  { key: 'titleBarBg', label: '상단 타이틀 바 색상', group: 'colors' },
  { key: 'dashboardBg', label: '대시보드 배경 색상', group: 'colors' },
];

const SettingsPanel = ({ 
  availableFonts, 
  selectedFont, 
  onFontChange, 
  theme, 
  onThemeChange,
  fontSize,
  onFontSizeChange,
  letterSpacing,
  onLetterSpacingChange
}) => {
  return (
    <div className="settings-panel">
      <div className="settings-section">
        <h3 className="settings-title">폰트 설정</h3>
        <label htmlFor="font-select">에디터 폰트</label>
        <select id="font-select" value={selectedFont} onChange={onFontChange}>
          <optgroup label="추천 웹 폰트">
            {availableFonts.web.map(font => (
              <option key={font.name} value={font.value}>{font.name}</option>
            ))}
          </optgroup>
          {availableFonts.system.length > 0 && (
            <optgroup label="내 컴퓨터 폰트">
              {availableFonts.system.map(font => (
                <option key={font} value={font}>{font}</option>
              ))}
            </optgroup>
          )}
        </select>
      </div>
      
      <div className="settings-section">
        <h3 className="settings-title">폰트 상세 설정</h3>
        <div className="font-control-group">
          <label htmlFor="font-size-slider">폰트 크기</label>
          <div className="slider-container">
            {/* ▼▼▼ input을 CustomSlider로 교체 ▼▼▼ */}
            <CustomSlider
              id="font-size-slider"
              min="12" max="20" step="0.5"
              value={fontSize} onChange={onFontSizeChange}
            />
            <span>{fontSize}px</span>
          </div>
        </div>
        <div className="font-control-group">
          <label htmlFor="letter-spacing-slider">자간</label>
          <div className="slider-container">
            <CustomSlider
              id="letter-spacing-slider"
              min="-1" max="3" step="0.1"
              value={letterSpacing} onChange={onLetterSpacingChange}
            />
            <span>{letterSpacing.toFixed(1)}px</span>
          </div>
        </div>
      </div>

      <div className="settings-section">
        <h3 className="settings-title">전역 테마 설정</h3>
        <ThemeEditor 
          theme={theme} onThemeChange={onThemeChange} options={globalThemeOptions}
        />
      </div>
    </div>
  );
};

export default SettingsPanel;


// ======================================================
// File: src\components\Sticker.js
// ======================================================

// File: src/components/Sticker.js (수정 완료)

import React, { useEffect, useRef, useState } from 'react';
import IndexedDBImage from './IndexedDBImage';

const Sticker = ({ stickerData, onUpdate, onDelete, isSelected, onSelect, onOpenFxModal }) => {
  const stickerRef = useRef(null);
  const [stickerImageUrl, setStickerImageUrl] = useState(null);
  const interactionState = useRef({ type: null, initialData: null, finalData: null, startMouse: { x: 0, y: 0 }, startAngle: 0, startDistance: 1 });
  
  useEffect(() => { if (stickerRef.current && !interactionState.current.type) { const el = stickerRef.current; el.style.left = `${stickerData.x || 0}px`; el.style.top = `${stickerData.y || 0}px`; el.style.width = `${stickerData.width || 150}px`; el.style.transform = `rotate(${stickerData.rotate || 0}deg)`; } }, [stickerData]);
  const handleInteractionStart = (e, type) => { e.preventDefault(); e.stopPropagation(); onSelect(stickerData.id); if (!stickerRef.current) return; const state = interactionState.current; state.type = type; state.initialData = { ...stickerData }; const stickerRect = stickerRef.current.getBoundingClientRect(); const center = { x: stickerRect.left + stickerRect.width / 2, y: stickerRect.top + stickerRect.height / 2, }; state.startMouse = { x: e.clientX, y: e.clientY }; const dx = e.clientX - center.x; const dy = e.clientY - center.y; if (type === 'rotate') { state.startAngle = Math.atan2(dy, dx) * (180 / Math.PI); } else if (type === 'resize') { state.startDistance = Math.sqrt(dx * dx + dy * dy); } window.addEventListener('mousemove', handleInteractionMove); window.addEventListener('mouseup', handleInteractionEnd); };
  const handleInteractionMove = (e) => { e.preventDefault(); const state = interactionState.current; const stickerEl = stickerRef.current; if (!state.type || !state.initialData || !stickerEl) return; let newData = { ...state.initialData }; if (state.type === 'drag') { const dx = e.clientX - state.startMouse.x; const dy = e.clientY - state.startMouse.y; newData.x = state.initialData.x + dx; newData.y = state.initialData.y + dy; stickerEl.style.left = `${newData.x}px`; stickerEl.style.top = `${newData.y}px`; } else { const stickerRect = stickerEl.getBoundingClientRect(); const center = { x: stickerRect.left + stickerRect.width / 2, y: stickerRect.top + stickerRect.height / 2, }; const dx = e.clientX - center.x; const dy = e.clientY - center.y; if (state.type === 'resize') { const currentDistance = Math.sqrt(dx * dx + dy * dy); const scaleRatio = currentDistance / state.startDistance; newData.width = Math.max(30, state.initialData.width * scaleRatio); stickerEl.style.width = `${newData.width}px`; } else if (state.type === 'rotate') { const currentAngle = Math.atan2(dy, dx) * (180 / Math.PI); const angleDelta = currentAngle - state.startAngle; newData.rotate = state.initialData.rotate + angleDelta; stickerEl.style.transform = `rotate(${newData.rotate}deg)`; } } state.finalData = newData; };
  const handleInteractionEnd = () => { const state = interactionState.current; if (state.finalData) { onUpdate(state.finalData); } Object.assign(state, { type: null, initialData: null, finalData: null, startMouse: { x: 0, y: 0 }, startAngle: 0, startDistance: 1, }); window.removeEventListener('mousemove', handleInteractionMove); window.removeEventListener('mouseup', handleInteractionEnd); };
  const handleContextMenu = (e) => { e.preventDefault(); if (window.confirm('이 스티커를 삭제하시겠습니까?')) { onDelete(stickerData.id); } };
  const handleFxClick = (e) => { e.stopPropagation(); onOpenFxModal(stickerData); };

  // ▼▼▼ [수정] 테두리/둥글기 CSS 변수 생성 로직 복원 ▼▼▼
  const generateEffectStyles = () => {
    const effects = stickerData.effects || {};
    const styles = {};

    const shadow = effects.shadow || {};
    if (shadow.enabled) {
      styles['--sticker-shadow'] = `${shadow.offsetX}px ${shadow.offsetY}px ${shadow.blur}px ${shadow.color}`;
    } else {
      styles['--sticker-shadow'] = 'none';
    }

    const animation = effects.animation || {};
    if (animation.type && animation.type !== 'none') {
      if (animation.type === 'bounce') styles.animation = 'bounce 1s infinite';
      else if (animation.type === 'float') styles.animation = 'float 3s ease-in-out infinite';
    } else {
      styles.animation = 'none';
    }

    const gradient = effects.gradient || {};
    if (gradient.enabled) {
      const { color, intensity } = gradient;
      const r = parseInt(color.slice(1, 3), 16);
      const g = parseInt(color.slice(3, 5), 16);
      const b = parseInt(color.slice(5, 7), 16);
      const alpha = intensity / 100;
      styles['--gradient-overlay'] = `linear-gradient(to top, rgba(${r},${g},${b},${alpha}) 0%, rgba(${r},${g},${b},0) 100%)`;
    } else {
      styles['--gradient-overlay'] = 'none';
    }
    
    // ▼▼▼ [복원] 텍스트 스티커가 아닐 때만 테두리/둥글기 CSS 변수 생성 ▼▼▼
    if (!stickerData.isTextSticker) {
      const border = effects.border || {};
      if (border.enabled) {
        styles['--border-color'] = border.color;
        styles['--border-width'] = `${border.width}px`;
      } else {
        styles['--border-width'] = '0px';
      }
      
      const borderRadius = effects.borderRadius || {};
      styles['--border-radius'] = `${borderRadius.value || 0}px`;
    } else {
      // 텍스트 스티커는 CSS 테두리/둥글기를 사용하지 않음
      styles['--border-width'] = '0px';
      styles['--border-radius'] = '0px';
    }

    if (stickerImageUrl) {
      styles['--sticker-mask-image'] = `url(${stickerImageUrl})`;
    }

    return styles;
  };

  return (
    <div
      ref={stickerRef}
      className={`sticker-wrapper ${isSelected ? 'selected' : ''}`}
      style={{
        position: 'absolute',
        left: `${stickerData.x || 0}px`,
        top: `${stickerData.y || 0}px`,
        width: `${stickerData.width || 150}px`,
        transform: `rotate(${stickerData.rotate || 0}deg)`,
        ...generateEffectStyles(),
      }}
      onMouseDown={(e) => handleInteractionStart(e, 'drag')}
      onContextMenu={handleContextMenu}
    >
      {/* ▼▼▼ [수정] 렌더링 구조 복원 (텍스트/이미지 스티커 공용) ▼▼▼ */}
      <div className="sticker-border-container">
        <div className="sticker-image-container">
          <IndexedDBImage 
              imageId={stickerData.imageId} 
              className="sticker-image"
              onUrlLoad={setStickerImageUrl}
          />
        </div>
      </div>
      {/* ▲▲▲ */}

      {isSelected && (
        <>
          <div className="sticker-handle rotate-handle" onMouseDown={(e) => handleInteractionStart(e, 'rotate')}>
            <i className="fas fa-sync-alt"></i>
          </div>
          <div className="sticker-handle resize-handle" onMouseDown={(e) => handleInteractionStart(e, 'resize')}>
            <i className="fas fa-expand-arrows-alt"></i>
          </div>
          <div className="sticker-handle fx-handle" onMouseDown={(e) => e.stopPropagation()} onClick={handleFxClick}>
            <i className="fas fa-magic"></i>
          </div>
        </>
      )}
    </div>
  );
};

export default Sticker;


// ======================================================
// File: src\components\StickerEffectsModal.js
// ======================================================

// File: src/components/StickerEffectsModal.js (수정 완료)

import React, { useState, useEffect } from 'react';
import SettingsModal from './SettingsModal';
import CustomSlider from './CustomSlider';

// ▼▼▼ [수정] DEFAULT_EFFECTS에 border와 borderRadius 복원 ▼▼▼
const DEFAULT_EFFECTS = {
  border: { enabled: false, color: '#FFFFFF', width: 2 },
  shadow: { enabled: false, color: '#000000', blur: 5, offsetX: 2, offsetY: 2 },
  gradient: { enabled: false, color: '#000000', intensity: 50 },
  animation: { type: 'none' },
  borderRadius: { value: 0 },
};

const StickerEffectsModal = ({ isOpen, onClose, stickerData, onSave, onLiveUpdate }) => {
  const [effects, setEffects] = useState(DEFAULT_EFFECTS);
  const [initialEffects, setInitialEffects] = useState(DEFAULT_EFFECTS);

  useEffect(() => {
    if (isOpen && stickerData) {
      // ▼▼▼ [수정] 병합 로직에 border와 borderRadius 다시 포함 ▼▼▼
      const currentEffects = {
        ...DEFAULT_EFFECTS,
        ...(stickerData.effects || {}),
        border: { ...DEFAULT_EFFECTS.border, ...(stickerData.effects?.border || {}) },
        shadow: { ...DEFAULT_EFFECTS.shadow, ...(stickerData.effects?.shadow || {}) },
        gradient: { ...DEFAULT_EFFECTS.gradient, ...(stickerData.effects?.gradient || {}) },
        animation: { ...DEFAULT_EFFECTS.animation, ...(stickerData.effects?.animation || {}) },
        borderRadius: { ...DEFAULT_EFFECTS.borderRadius, ...(stickerData.effects?.borderRadius || {}) },
      };
      setEffects(currentEffects);
      setInitialEffects(currentEffects);
    }
  }, [isOpen, stickerData]);

  useEffect(() => {
    if (isOpen && onLiveUpdate) {
      onLiveUpdate(effects);
    }
  }, [effects, isOpen, onLiveUpdate]);
  
  const handleClose = () => {
      onLiveUpdate(initialEffects);
      onClose();
  };

  const handleToggle = (effect) => {
    setEffects(prev => ({ ...prev, [effect]: { ...prev[effect], enabled: !prev[effect].enabled } }));
  };

  const handleValueChange = (effect, key, value) => {
    setEffects(prev => ({ ...prev, [effect]: { ...prev[effect], [key]: value } }));
  };
  
  const handleAnimationChange = (e) => {
    setEffects(prev => ({ ...prev, animation: { type: e.target.value } }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    onSave(effects);
    onClose();
  };

  if (!stickerData) return null;

  // ▼▼▼ [신규] 텍스트 스티커 여부 확인 (테두리/둥글기 UI를 숨기기 위함) ▼▼▼
  const isTextSticker = stickerData.isTextSticker === true;

  return (
    <SettingsModal isOpen={isOpen} onClose={handleClose} title="스티커 효과 편집">
      <form onSubmit={handleSubmit} className="utility-panel">
        <div className="fx-modal-grid">

          {/* ▼▼▼ [수정] 텍스트 스티커가 아닐 때만 테두리/둥글기 UI를 렌더링 ▼▼▼ */}
          {!isTextSticker && (
            <div className="form-card fx-group">
              <div className="card-label fx-header">
                <label>테두리</label>
                <input type="checkbox" className="toggle-switch" checked={effects.border.enabled} onChange={() => handleToggle('border')} />
              </div>
              <div className="fx-controls">
                <div className="fx-control">
                  <span>색상</span>
                  <input type="color" value={effects.border.color} onChange={(e) => handleValueChange('border', 'color', e.target.value)} />
                </div>
                <div className="fx-control slider">
                  <span>굵기</span>
                  <CustomSlider min="1" max="20" step="1" value={effects.border.width} onChange={(e) => handleValueChange('border', 'width', parseInt(e.target.value))} />
                  <span>{effects.border.width}px</span>
                </div>
                <div className="fx-control slider">
                  <span>둥글기</span>
                  <CustomSlider min="0" max="100" step="1" value={effects.borderRadius.value} onChange={(e) => handleValueChange('borderRadius', 'value', parseInt(e.target.value))} />
                  <span>{effects.borderRadius.value}px</span>
                </div>
              </div>
            </div>
          )}

          {/* 그림자 효과 */}
          <div className="form-card fx-group">
            <div className="card-label fx-header">
              <label>그림자</label>
              <input type="checkbox" className="toggle-switch" checked={effects.shadow.enabled} onChange={() => handleToggle('shadow')} />
            </div>
            <div className="fx-controls">
              <div className="fx-control">
                <span>색상</span>
                <input type="color" value={effects.shadow.color} onChange={(e) => handleValueChange('shadow', 'color', e.target.value)} />
              </div>
              <div className="fx-control slider">
                <span>흐림</span>
                <CustomSlider min="0" max="30" step="1" value={effects.shadow.blur} onChange={(e) => handleValueChange('shadow', 'blur', parseInt(e.target.value))} />
                <span>{effects.shadow.blur}px</span>
              </div>
              <div className="fx-control slider">
                <span>X축</span>
                <CustomSlider min="-20" max="20" step="1" value={effects.shadow.offsetX} onChange={(e) => handleValueChange('shadow', 'offsetX', parseInt(e.target.value))} />
                <span>{effects.shadow.offsetX}px</span>
              </div>
              <div className="fx-control slider">
                <span>Y축</span>
                <CustomSlider min="-20" max="20" step="1" value={effects.shadow.offsetY} onChange={(e) => handleValueChange('shadow', 'offsetY', parseInt(e.target.value))} />
                <span>{effects.shadow.offsetY}px</span>
              </div>
            </div>
          </div>

          {/* 그라데이션 오버레이 */}
          <div className="form-card fx-group">
             <div className="card-label fx-header">
              <label>그라데이션</label>
              <input type="checkbox" className="toggle-switch" checked={effects.gradient.enabled} onChange={() => handleToggle('gradient')} />
            </div>
            <div className="fx-controls">
                <div className="fx-control">
                    <span>색상</span>
                    <input type="color" value={effects.gradient.color} onChange={(e) => handleValueChange('gradient', 'color', e.target.value)} />
                </div>
                <div className="fx-control slider">
                    <span>세기</span>
                    <CustomSlider min="0" max="100" step="1" value={effects.gradient.intensity} onChange={(e) => handleValueChange('gradient', 'intensity', parseInt(e.target.value))} />
                    <span>{effects.gradient.intensity}%</span>
                </div>
            </div>
          </div>

          {/* 애니메이션 */}
           <div className="form-card fx-group">
             <div className="card-label fx-header"> <label>애니메이션</label> </div>
            <div className="fx-controls">
                <select value={effects.animation.type} onChange={handleAnimationChange}>
                    <option value="none">없음</option> <option value="bounce">바운스</option> <option value="float">둥실둥실</option>
                </select>
            </div>
          </div>

        </div>
        <button type="submit" className="btn-primary">효과 저장하기</button>
      </form>
    </SettingsModal>
  );
};

export default StickerEffectsModal;


// ======================================================
// File: src\components\TextStickerModal.js
// ======================================================

// File: src/components/TextStickerModal.js

import React, { useState, useRef } from 'react';
import SettingsModal from './SettingsModal';
import CustomSlider from './CustomSlider';

const FONT_OPTIONS = [
  "'Paperozi', sans-serif",
  "'Presentation', sans-serif",
  "'Noto Sans KR', sans-serif",
  "Arial, sans-serif",
  "'Courier New', monospace",
  "'Comic Sans MS', cursive",
];

const dataURLtoBlob = (dataurl) => {
  const arr = dataurl.split(',');
  const mime = arr[0].match(/:(.*?);/)[1];
  const bstr = atob(arr[1]);
  let n = bstr.length;
  const u8arr = new Uint8Array(n);
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }
  return new Blob([u8arr], { type: mime });
};

function roundRect(ctx, x, y, width, height, radius) {
  if (width < 2 * radius) radius = width / 2;
  if (height < 2 * radius) radius = height / 2;
  ctx.beginPath();
  ctx.moveTo(x + radius, y);
  ctx.arcTo(x + width, y, x + width, y + height, radius);
  ctx.arcTo(x + width, y + height, x, y + height, radius);
  ctx.arcTo(x, y + height, x, y, radius);
  ctx.arcTo(x, y, x + width, y, radius);
  ctx.closePath();
  return ctx;
}


const TextStickerModal = ({ isOpen, onClose, onAdd }) => {
  const [text, setText] = useState('스티커 텍스트');
  const [fontFamily, setFontFamily] = useState(FONT_OPTIONS[0]);
  const [fontSize, setFontSize] = useState(48);
  const [fontWeight, setFontWeight] = useState(400);
  const [letterSpacing, setLetterSpacing] = useState(0);
  const [textColor, setTextColor] = useState('#FFFFFF');
  const [strokeColor, setStrokeColor] = useState('#000000');
  const [strokeWidth, setStrokeWidth] = useState(2);
  const [backgroundColor, setBackgroundColor] = useState('#5865F2');
  const [isTransparent, setIsTransparent] = useState(false);
  const [borderRadius, setBorderRadius] = useState(20);
  const previewRef = useRef(null);

  const finalBackgroundColor = isTransparent ? 'transparent' : backgroundColor;

  const handleCreate = async () => {
    if (!text.trim()) {
      alert('텍스트를 입력해주세요.');
      return;
    }
    
    const tempDiv = document.createElement('div');
    tempDiv.style.position = 'absolute';
    tempDiv.style.left = '-9999px';
    tempDiv.style.font = `${fontWeight} ${fontSize}px ${fontFamily}`;
    tempDiv.style.letterSpacing = `${letterSpacing}px`;
    tempDiv.style.whiteSpace = 'pre';
    tempDiv.textContent = text;
    document.body.appendChild(tempDiv);
    const textMetrics = tempDiv.getBoundingClientRect();
    document.body.removeChild(tempDiv);

    const padding = 20 + strokeWidth;
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    const lines = text.split('\n');
    const lineHeight = textMetrics.height / lines.length;
    canvas.width = textMetrics.width + padding * 2;
    canvas.height = (lineHeight * lines.length) + padding * 2;

    if (!isTransparent) {
      ctx.fillStyle = backgroundColor;
      roundRect(ctx, 0, 0, canvas.width, canvas.height, borderRadius);
      ctx.fill();
    }

    ctx.font = `${fontWeight} ${fontSize}px ${fontFamily}`;
    ctx.letterSpacing = `${letterSpacing}px`;
    ctx.textAlign = 'center';
    ctx.textBaseline = 'middle';
    
    const centerX = canvas.width / 2;
    const startY = (canvas.height / 2) - (lineHeight * (lines.length - 1) / 2);

    lines.forEach((line, index) => {
      const lineY = startY + (index * lineHeight);
      if (strokeWidth > 0) {
        ctx.strokeStyle = strokeColor;
        ctx.lineWidth = strokeWidth * 2;
        ctx.strokeText(line, centerX, lineY);
      }
      ctx.fillStyle = textColor;
      ctx.fillText(line, centerX, lineY);
    });

    const dataUrl = canvas.toDataURL('image/png');
    const blob = dataURLtoBlob(dataUrl);
    onAdd(blob);
    onClose();
  };

  return (
    <SettingsModal isOpen={isOpen} onClose={onClose} title="텍스트 스티커 만들기">
      <div className="text-sticker-modal-content utility-panel">
        <div className="form-card">
          <label className="card-label">미리보기</label>
          <div 
            className="text-sticker-preview" 
            style={{ 
              backgroundColor: finalBackgroundColor,
              borderRadius: `${borderRadius}px`
            }}
          >
            <span
              ref={previewRef}
              style={{
                fontFamily,
                fontSize: `${fontSize}px`,
                fontWeight: fontWeight,
                letterSpacing: `${letterSpacing}px`,
                color: textColor,
                WebkitTextStroke: `${strokeWidth}px ${strokeColor}`,
                whiteSpace: 'pre',
              }}
            >
              {text}
            </span>
          </div>
        </div>
        
        <div className="form-card">
          <label htmlFor="sticker-text-input" className="card-label">텍스트 내용</label>
          <textarea
            id="sticker-text-input"
            rows="3"
            value={text}
            onChange={(e) => setText(e.target.value)}
            placeholder="스티커에 표시될 텍스트를 입력하세요."
          />
        </div>

        <div className="text-sticker-controls-grid">
          <div className="form-card">
            <label className="card-label">폰트 스타일</label>
            <select value={fontFamily} onChange={(e) => setFontFamily(e.target.value)}>
              {FONT_OPTIONS.map(font => (
                <option key={font} value={font}>{font.split(',')[0].replace(/'/g, '')}</option>
              ))}
            </select>
            <div className="slider-container">
              <CustomSlider min="12" max="128" step="1" value={fontSize} onChange={(e) => setFontSize(parseInt(e.target.value))} />
              <span>{fontSize}px</span>
            </div>
            <div className="slider-container">
              <CustomSlider min="100" max="900" step="100" value={fontWeight} onChange={(e) => setFontWeight(parseInt(e.target.value))} />
              <span>{fontWeight}</span>
            </div>
            <div className="slider-container">
              <CustomSlider min="-5" max="20" step="0.5" value={letterSpacing} onChange={(e) => setLetterSpacing(parseFloat(e.target.value))} />
              <span>{letterSpacing.toFixed(1)}px</span>
            </div>
          </div>

          <div className="form-card">
            <label className="card-label">디자인</label>
            <div className="sticker-color-controls">
              <div>
                <span>텍스트</span>
                <input type="color" value={textColor} onChange={(e) => setTextColor(e.target.value)} />
              </div>
              <div>
                <span>테두리</span>
                <input type="color" value={strokeColor} onChange={(e) => setStrokeColor(e.target.value)} />
              </div>
              <div>
                <span>배경</span>
                <input type="color" value={backgroundColor} onChange={(e) => setBackgroundColor(e.target.value)} disabled={isTransparent} />
              </div>
            </div>
            <div className="slider-container">
              <span>테두리</span>
              <CustomSlider min="0" max="10" step="0.5" value={strokeWidth} onChange={(e) => setStrokeWidth(parseFloat(e.target.value))} />
              <span>{strokeWidth.toFixed(1)}px</span>
            </div>
            <div className="slider-container">
              <span>둥글기</span>
              <CustomSlider min="0" max="100" step="1" value={borderRadius} onChange={(e) => setBorderRadius(parseInt(e.target.value))} />
              <span>{borderRadius}px</span>
            </div>
             <div className="transparent-toggle">
              <input type="checkbox" id="transparent-bg" checked={isTransparent} onChange={(e) => setIsTransparent(e.target.checked)} />
              <label htmlFor="transparent-bg">투명 배경</label>
            </div>
          </div>
        </div>

        <button type="button" className="btn-primary" onClick={handleCreate}>생성하기</button>
      </div>
    </SettingsModal>
  );
};

export default TextStickerModal;


// ======================================================
// File: src\components\ThemeEditor.js
// ======================================================

// 파일: src/components/ThemeEditor.js (오류 수정 완료)

import React, { useState } from 'react';

const ThemeEditor = ({ theme, onThemeChange, options }) => {
  // ▼▼▼ [핵심 수정] useState를 올바르게 사용하여 상태와 세터 함수를 선언합니다. ▼▼▼
  const [activeTab, setActiveTab] = useState('colors');

  const handleChange = (e) => {
    const { name, value } = e.target;
    onThemeChange({ ...theme, [name]: value });
  };
  
  const handleSliderChange = (e) => {
    const { name, value } = e.target;
    onThemeChange({ ...theme, [name]: parseInt(value, 10) });
  };

  if (!theme) return <div>테마 데이터를 불러오는 중...</div>;

  const colorOptions = options.filter(opt => opt.group === 'colors');
  const layoutOptions = options.filter(opt => opt.group === 'layout');

  return (
    <div className="theme-editor-container">
      <div className="theme-editor-tabs">
        <button 
          className={`tab-btn ${activeTab === 'colors' ? 'active' : ''}`}
          onClick={() => setActiveTab('colors')}
        >
          색상
        </button>
        <button 
          className={`tab-btn ${activeTab === 'layout' ? 'active' : ''}`}
          onClick={() => setActiveTab('layout')}
        >
          레이아웃
        </button>
      </div>

      <div className="theme-editor-content">
        {activeTab === 'colors' && (
          <div className="theme-editor-grid">
            {colorOptions.map(option => (
              <div key={option.key} className="theme-option">
                <label htmlFor={option.key}>{option.label}</label>
                <div className="color-input-wrapper">
                  <input
                    type="color"
                    id={option.key}
                    name={option.key}
                    value={theme[option.key] || '#000000'}
                    onChange={handleChange}
                  />
                  <input
                    type="text"
                    className="color-text-input"
                    name={option.key}
                    value={String(theme[option.key] || '').toUpperCase()}
                    onChange={handleChange}
                    maxLength="7"
                  />
                </div>
              </div>
            ))}
          </div>
        )}

        {activeTab === 'layout' && (
          <div className="layout-settings-grid">
            {layoutOptions.map(option => (
              <div key={option.key} className="font-control-group">
                <label htmlFor={`${option.key}-slider`}>{option.label}</label>
                <div className="slider-container">
                  <input
                    type="range"
                    id={`${option.key}-slider`}
                    name={option.key}
                    min={option.min}
                    max={option.max}
                    step={option.step}
                    value={theme[option.key] || option.default}
                    onChange={handleSliderChange}
                  />
                  <span>{theme[option.key] || option.default}{option.unit}</span>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default ThemeEditor;


// ======================================================
// File: src\components\ThemeSelectionModal.js
// ======================================================

// 파일: src/components/ThemeSelectionModal.js (새 파일)

import React from 'react';
import SettingsModal from './SettingsModal';

const ThemePreview = ({ theme, onSelect }) => {
  if (!theme) return null;

  return (
    <div className="theme-preview-card" onClick={() => onSelect(theme)}>
      <h4 className="theme-preview-title">{theme.name}</h4>
      <div className="theme-preview-palette">
        <div className="theme-preview-colorbox" style={{ backgroundColor: theme.sidebarBg, color: theme.textColor }}>BG</div>
        <div className="theme-preview-colorbox" style={{ backgroundColor: theme.bubbleMeBg, color: getLuminance(theme.bubbleMeBg) > 128 ? '#000' : '#FFF' }}>Me</div>
        <div className="theme-preview-colorbox" style={{ backgroundColor: theme.bubbleOtherBg, color: getLuminance(theme.bubbleOtherBg) > 128 ? '#000' : '#FFF' }}>Other</div>
        <div className="theme-preview-colorbox" style={{ backgroundColor: theme.buttonBg, color: getLuminance(theme.buttonBg) > 128 ? '#000' : '#FFF' }}>Accent</div>
      </div>
    </div>
  );
};

// getLuminance 함수를 모달 내부에 간단히 복사하여 사용
function getLuminance(hex) {
    try {
        const rgb = parseInt(hex.slice(1), 16);
        const r = (rgb >> 16) & 0xff, g = (rgb >> 8) & 0xff, b = (rgb >> 0) & 0xff;
        return 0.2126 * r + 0.7152 * g + 0.0722 * b;
    } catch(e) { return 0; }
}

const ThemeSelectionModal = ({ isOpen, onClose, themes, onSelectTheme }) => {
  return (
    <SettingsModal isOpen={isOpen} onClose={onClose} title="테마 선택">
      <div className="theme-selection-container">
        <p className="theme-selection-description">이미지에서 추출한 테마들입니다. 마음에 드는 스타일을 선택하세요.</p>
        <div className="theme-previews-grid">
          {(themes || []).map((theme, index) => (
            <ThemePreview key={index} theme={theme} onSelect={onSelectTheme} />
          ))}
        </div>
        {(!themes || themes.length === 0) && (
            <p>이 이미지에서는 추천 테마를 생성할 수 없습니다.</p>
        )}
      </div>
    </SettingsModal>
  );
};

export default ThemeSelectionModal;


// ======================================================
// File: src\components\TiptapEditor.js
// ======================================================

// File: src/components/TiptapEditor.js (수정 완료)

import React, { useEffect } from 'react';
import { useEditor, EditorContent, getMarkAttributes } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Superscript from '@tiptap/extension-superscript';
import Subscript from '@tiptap/extension-subscript';
import TextStyle from '@tiptap/extension-text-style';
import { FontSize } from '../tiptapExtensions/FontSize';
import Comment from '../tiptapExtensions/Comment';

const EditorToolbar = ({ editor, onSetComment }) => {
  if (!editor) {
    return null;
  }

  const handleFontSizeChange = (e) => {
    const value = e.target.value;
    if (value) {
      editor.chain().focus().setFontSize(value).run();
    } else {
      editor.chain().focus().unsetFontSize().run();
    }
  };
  
  const handleCommentButtonClick = () => {
    if (editor.isActive('comment')) {
      editor.chain().focus().unsetComment().run();
      return;
    }
    
    if (onSetComment) {
      onSetComment(editor);
    }
  };

  const currentFontSize = getMarkAttributes(editor.state, 'textStyle').fontSize || '';

  return (
    <div className="editor-toolbar">
      <button type="button" onClick={() => editor.chain().focus().toggleBold().run()} className={editor.isActive('bold') ? 'is-active' : ''} title="볼드">
        <i className="fas fa-bold"></i>
      </button>
      <button type="button" onClick={() => editor.chain().focus().toggleItalic().run()} className={editor.isActive('italic') ? 'is-active' : ''} title="이탤릭">
        <i className="fas fa-italic"></i>
      </button>
      <button type="button" onClick={() => editor.chain().focus().toggleSuperscript().run()} className={editor.isActive('superscript') ? 'is-active' : ''} title="위 첨자">
        <i className="fas fa-superscript"></i>
      </button>
      <button type="button" onClick={() => editor.chain().focus().toggleSubscript().run()} className={editor.isActive('subscript') ? 'is-active' : ''} title="아래 첨자">
        <i className="fas fa-subscript"></i>
      </button>
      <button 
        type="button" 
        onClick={handleCommentButtonClick}
        className={editor.isActive('comment') ? 'is-active' : ''} 
        title="주석"
      >
        <i className="fas fa-comment-dots"></i>
      </button>
      <select value={currentFontSize} onChange={handleFontSizeChange} className="font-size-selector">
        <option value="">기본 크기</option>
        <option value="12px">12px</option>
        <option value="14px">14px</option>
        <option value="16px">16px</option>
        <option value="18px">18px</option>
        <option value="24px">24px</option>
        <option value="30px">30px</option>
      </select>
    </div>
  );
};

const TiptapEditor = ({ content, onUpdate, placeholder, onSetComment }) => {
  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        heading: false,
        blockquote: false,
        codeBlock: false,
      }),
      Superscript,
      Subscript,
      TextStyle,
      FontSize,
      Comment,
    ],
    content: content,
    onUpdate: ({ editor }) => {
      if (editor.isEmpty) {
        onUpdate('');
      } else {
        onUpdate(editor.getHTML());
      }
    },
    editorProps: {
        attributes: {
            'data-placeholder': placeholder,
        },
    },
  });

  // ▼▼▼ [핵심 수정] 텍스트가 보이지 않던 문제 해결
  // 외부에서 content prop이 변경될 때 에디터의 내용을 강제로 업데이트합니다.
  useEffect(() => {
    if (editor && content !== editor.getHTML()) {
      // editor.commands.setContent()는 onUpdate를 다시 트리거하므로,
      // 현재 내용과 다를 때만 실행하여 무한 루프를 방지합니다.
      editor.commands.setContent(content, false); // false는 onUpdate 트리거 방지 옵션
    }
  }, [content, editor]);

  return (
    <div className="tiptap-editor-wrapper">
      <EditorToolbar editor={editor} onSetComment={onSetComment} />
      <EditorContent editor={editor} />
    </div>
  );
};

export default TiptapEditor;


// ======================================================
// File: src\components\TitleBar.css
// ======================================================

/* 파일: src/components/TitleBar.css */

.title-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: 32px;
  color: #dcddde;
  width: 100%;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 9999;
  user-select: none;
}

.title-bar-drag-region {
  flex-grow: 1;
  height: 100%;
  -webkit-app-region: drag;
  display: flex;
  align-items: center;
  padding-left: 12px;
}

.title-text {
  font-size: 13px;
  font-weight: 500;
}

.window-controls {
  display: flex;
  height: 100%;
  -webkit-app-region: no-drag;
}

.window-control-btn {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  width: 46px;
  height: 100%;
  border: none;
  background-color: transparent;
  color: #dcddde; /* 아이콘 색상 상속을 위한 기본 색상 */
  cursor: pointer;
  transition: background-color 0.2s;
}

.window-control-btn:hover {
  background-color: rgba(255, 255, 255, 0.1);
}

/* ▼▼▼ 새로 추가된 설정 버튼 스타일 ▼▼▼ */
.settings-btn {
  font-size: 16px; /* 톱니바퀴 아이콘 크기 */
  width: 40px;   /* 너비를 살짝 줄임 */
}

/* ▼▼▼ 기존 아이콘 색상이 확실히 보이도록 수정 ▼▼▼ */
.window-control-btn svg {
  width: 10px;
  height: 10px;
  fill: currentColor; /* 버튼의 color 속성을 상속받아 채움 */
}

#close-btn:hover {
  background-color: #e81123;
  color: white;
}


// ======================================================
// File: src\components\TitleBar.js
// ======================================================

// 파일: src/components/TitleBar.js

import React from 'react';
import './TitleBar.css';

// onOpenSettings prop을 새로 받습니다.
const TitleBar = ({ bgColor, onOpenSettings }) => {
  const handleMinimize = () => window.electronAPI.minimize();
  const handleMaximize = () => window.electronAPI.maximize();
  const handleClose = () => window.electronAPI.close();

  const titleBarStyle = {
    backgroundColor: bgColor || '#202225',
  };

  return (
    <div className="title-bar" style={titleBarStyle}>
      {/* 드래그 영역 */}
      <div className="title-bar-drag-region">
        <div className="title-text">씹덕의 세계로 오라</div>
      </div>

      {/* 아이콘 버튼 영역 */}
      <div className="window-controls">
        {/* ▼▼▼ 설정 버튼 추가 ▼▼▼ */}
        <button className="window-control-btn settings-btn" title="설정" onClick={onOpenSettings}>
          <i className="fas fa-cog"></i>
        </button>

        {/* 기존 윈도우 조절 버튼 */}
        <button className="window-control-btn" id="minimize-btn" onClick={handleMinimize}>
          <svg x="0px" y="0px" viewBox="0 0 10.2 1"><rect x="0" y="0" width="10.2" height="1"></rect></svg>
        </button>
        <button className="window-control-btn" id="maximize-btn" onClick={handleMaximize}>
          <svg viewBox="0 0 10 10"><path d="M0,0v10h10V0H0z M9,9H1V1h8V9z"></path></svg>
        </button>
        <button className="window-control-btn" id="close-btn" onClick={handleClose}>
          <svg viewBox="0 0 10 10"><polygon points="10.2,0.7 9.5,0 5.1,4.4 0.7,0 0,0.7 4.4,5.1 0,9.5 0.7,10.2 5.1,5.8 9.5,10.2 10.2,9.5 5.8,5.1"></polygon></svg>
        </button>
      </div>
    </div>
  );
};

export default TitleBar;


// ======================================================
// File: src\components\Workspace.js
// ======================================================

// File: src/components/Workspace.js

import React, { useState, useRef, useEffect } from 'react';
import ConversationList from './ConversationList';
import MessageView from './MessageView';
import SettingsModal from './SettingsModal';
import ThemeEditor from './ThemeEditor';
import ImageCropModal from './ImageCropModal';
import CharacterSettingsModal from './CharacterSettingsModal';
import PairSettingsModal from './PairSettingsModal';
import ContextMenu from './ContextMenu';
import InputDialog from './InputDialog';
import RichTextEditModal from './RichTextEditModal';
import ProfilePopover from './ProfilePopover';
import BookmarkPanel from './BookmarkPanel';
import TextStickerModal from './TextStickerModal';
import DataImportModal from './DataImportModal';
import { db } from '../db';
import ColorThief from 'colorthief';
import { generateThemesFromPalette } from '../themeUtils';
import ThemeSelectionModal from './ThemeSelectionModal';
import { getMarkAttributes } from '@tiptap/core';

const dataURLtoBlob = (dataurl) => {
  const arr = dataurl.split(',');
  const mime = arr[0].match(/:(.*?);/)[1];
  const bstr = atob(arr[1]);
  let n = bstr.length;
  const u8arr = new Uint8Array(n);
  while (n--) {
    u8arr[n] = bstr.charCodeAt(n);
  }
  return new Blob([u8arr], { type: mime });
};


const workspaceThemeOptions = [
  { key: 'appBg', label: '전체 배경', group: 'colors' },
  { key: 'sidebarBg', label: '사이드바 배경', group: 'colors' },
  { key: 'headerBg', label: '헤더 배경', group: 'colors' },
  { key: 'chatBg', label: '채팅창 배경', group: 'colors' },
  { key: 'footerBg', label: '메시지 입력창 배경', group: 'colors' },
  { key: 'textColor', label: '기본 글자 색상', group: 'colors' },
  { key: 'headerTitleColor', label: '헤더 제목 색상', group: 'colors' },
  { key: 'nameMeColor', label: 'A 캐릭터 이름 색상', group: 'colors' },
  { key: 'nameOtherColor', label: 'B 캐릭터 이름 색상', group: 'colors' },
  { key: 'bubbleMeBg', label: 'A 캐릭터 말풍선', group: 'colors' },
  { key: 'bubbleOtherBg', label: 'B 캐릭터 말풍선', group: 'colors' },
  { key: 'buttonBg', label: '버튼/강조 색상', group: 'colors' },
  { key: 'inputBg', label: '채팅 입력필드 배경', group: 'colors' },
  { key: 'sidebarInputBg', label: '사이드바 입력창 배경', group: 'colors' },
  { key: 'borderColor', label: '구분선/테두리 색상', group: 'colors' },
  { 
    key: 'mediaMaxWidth', 
    label: '채팅 미디어 최대 너비', 
    group: 'layout', 
    min: 200, 
    max: 800, 
    step: 10, 
    default: 400, 
    unit: 'px' 
  },
];

const Workspace = ({ 
  pairData, onAddMessage, onGoToDashboard, onAddConversation, onUpdateTheme,
  onUpdateBackgroundImage, onAddSlideImage, onDeleteSlideImage, onUpdateCharacters,
  onUpdatePairDetails, onEditConversation, onDeleteConversation, onEditMessage,
  onAddMessageInBetween, onDeleteMessage, onUpdateStickers, onToggleBookmark,
  onImportMessages
}) => {
  const [selectedConversationId, setSelectedConversationId] = useState(null);
  const [isThemeModalOpen, setIsThemeModalOpen] = useState(false);
  const [isCharacterModalOpen, setIsCharacterModalOpen] = useState(false);
  const [isPairSettingsModalOpen, setIsPairSettingsModalOpen] = useState(false);
  const [isCropperOpen, setIsCropperOpen] = useState(false);
  const [imageToCrop, setImageToCrop] = useState(null);
  const [onCropSuccess, setOnCropSuccess] = useState(null);
  const [cropAspectRatio, setCropAspectRatio] = useState(NaN);
  const [contextMenu, setContextMenu] = useState({ isOpen: false, position: { x: 0, y: 0 }, items: [] });
  
  const [dialogState, setDialogState] = useState({ isOpen: false, title: '', fields: [], onConfirm: () => {}, formData: {} });
  
  const [editingMessage, setEditingMessage] = useState(null);
  
  const [themeOptions, setThemeOptions] = useState([]);
  const [isThemeSelectorOpen, setIsThemeSelectorOpen] = useState(false);
  
  const [popoverState, setPopoverState] = useState({ isOpen: false, character: null, anchorEl: null });
  
  const [isBookmarkPanelOpen, setIsBookmarkPanelOpen] = useState(false);
  const [scrollToMessageId, setScrollToMessageId] = useState(null);
  
  const [isTextStickerModalOpen, setIsTextStickerModalOpen] = useState(false);
  const [isImportModalOpen, setIsImportModalOpen] = useState(false);

  const stickerInputRef = useRef(null);

  const handleSelectConversation = (convoId) => setSelectedConversationId(convoId);

  const openImageCropper = (imageSource, aspectRatio, callback) => { 
    if (imageSource instanceof File || imageSource instanceof Blob) { 
      const reader = new FileReader(); 
      reader.onload = (e) => setImageToCrop(e.target.result); 
      reader.readAsDataURL(imageSource); 
    } else { 
      setImageToCrop(imageSource); 
    } 
    setCropAspectRatio(aspectRatio); 
    setOnCropSuccess(() => callback); 
    setIsCropperOpen(true); 
  };

  const handleAddMessageRequest = (messageData) => {
    const { type, file } = messageData;

    if (type === 'text') {
      onAddMessage(selectedConversationId, messageData);
      return;
    }

    if (type === 'file' && file) {
      if (file.type.startsWith('video/') || file.type.startsWith('image/gif')) {
        onAddMessage(selectedConversationId, messageData);
        return;
      }

      if (file.type.startsWith('image/')) {
        const callback = (croppedDataUrl) => {
          const croppedBlob = dataURLtoBlob(croppedDataUrl);
          const croppedFile = new File([croppedBlob], file.name, { type: file.type });
          onAddMessage(selectedConversationId, { ...messageData, file: croppedFile });
        };
        openImageCropper(file, NaN, callback);
      }
    }
  };

  const handleAvatarClick = (character, anchorEl) => {
    setPopoverState({ isOpen: true, character, anchorEl });
  };
  const handleClosePopover = () => {
    setPopoverState({ isOpen: false, character: null, anchorEl: null });
  };
  
  const handleGoToBookmark = (messageId) => {
    setScrollToMessageId(messageId);
    setIsBookmarkPanelOpen(false);
  };

  const addNewStickerToConversation = async (imageBlob, isTextSticker = false) => {
    if (!selectedConversationId) return;
    try {
      const imageId = await db.images.add({ data: imageBlob });
      const newSticker = { 
        id: `sticker_${Date.now()}`, 
        imageId: imageId, 
        x: 100, y: 100, width: 150, rotate: 0,
        isTextSticker: isTextSticker,
        effects: {
          border: { enabled: false, color: '#FFFFFF', width: 2 },
          shadow: { enabled: false, color: '#000000', blur: 5, offsetX: 2, offsetY: 2 },
          gradient: { enabled: false, color: '#000000', intensity: 50 },
          animation: { type: 'none' },
          borderRadius: { value: 0 },
        }
      };
      const currentConvo = pairData.conversations.find(c => c.id === selectedConversationId);
      const updatedStickers = [...(currentConvo.stickers || []), newSticker];
      onUpdateStickers(selectedConversationId, updatedStickers);
    } catch (error) { 
      console.error("스티커 이미지 저장 실패:", error); 
      alert("스티커를 추가하는 데 실패했습니다."); 
    }
  };

  const handleStickerFileSelect = async (e) => {
    const file = e.target.files[0];
    if (file) {
      await addNewStickerToConversation(file, false);
    }
    e.target.value = null;
  };

  const handleAddTextSticker = async (stickerBlob) => {
    await addNewStickerToConversation(stickerBlob, true);
  };

  const closeDialog = () => setDialogState({ isOpen: false, title: '', fields: [], onConfirm: () => {}, formData: {} });

  const handleSetCommentForNewMessage = (editor) => {
    const existingComment = getMarkAttributes(editor.state, 'comment').comment || '';
    setDialogState({
      isOpen: true,
      title: '주석 추가/수정',
      formData: { comment: existingComment },
      fields: [
        { name: 'comment', label: '주석 내용', type: 'textarea', placeholder: '표시할 주석을 입력하세요...' },
      ],
      onConfirm: (formData) => {
        const commentText = formData.comment.trim();
        if (commentText) {
          editor.chain().focus().setComment({ comment: commentText }).run();
        } else {
          editor.chain().focus().unsetComment().run();
        }
        closeDialog();
      },
    });
  };
  
  const handleMessageContextMenu = (e, messageId) => {
    e.preventDefault();
    const convo = (pairData.conversations || []).find(c => c.id === selectedConversationId);
    if (!convo) return;
    const message = convo.messages.find(m => m.id === messageId);
    if (!message) return;

    const menuItems = [
      {
        label: message.bookmarked ? '북마크 제거' : '북마크 추가',
        action: () => onToggleBookmark(selectedConversationId, messageId)
      },
      { isSeparator: true },
      {
        label: '수정',
        action: () => {
          setEditingMessage({ 
            id: messageId, 
            content: message.content, 
            sender: message.sender,
            characterVersionId: message.characterVersionId
          });
        },
        disabled: message.type !== 'text'
      },
      {
        label: '앞에 추가',
        action: () => {
          const versions = pairData.characters.me || [];
          const characterVersionId = versions.length > 0 ? versions[0].id : null;
          setDialogState({
            isOpen: true,
            title: '메시지 앞에 추가',
            formData: { text: '', sender: 'Me', characterVersionId },
            onConfirm: (formData) => {
              if(formData.text.trim()) {
                onAddMessageInBetween(selectedConversationId, messageId, formData, 'before');
              }
              closeDialog();
            }
          });
        }
      },
      {
        label: '뒤에 추가',
        action: () => {
          const versions = pairData.characters.other || [];
          const characterVersionId = versions.length > 0 ? versions[0].id : null;
          setDialogState({
            isOpen: true,
            title: '메시지 뒤에 추가',
            formData: { text: '', sender: 'Other', characterVersionId },
            onConfirm: (formData) => {
              if(formData.text.trim()) {
                onAddMessageInBetween(selectedConversationId, messageId, formData, 'after');
              }
              closeDialog();
            }
          });
        }
      },
      { isSeparator: true },
      {
        label: '복사',
        action: () => navigator.clipboard.writeText(message.content),
        disabled: message.type !== 'text'
      },
      {
        label: '삭제',
        className: 'delete',
        action: () => {
          if (window.confirm('이 메시지를 정말로 삭제하시겠습니까?')) {
            onDeleteMessage(selectedConversationId, messageId);
          }
        }
      },
    ].filter(item => !item.disabled);

    setContextMenu({ isOpen: true, position: { x: e.clientX, y: e.clientY }, items: menuItems });
  };

  useEffect(() => {
    if (!dialogState.isOpen) return;

    const { sender } = dialogState.formData;
    const characterKey = sender === 'Me' ? 'me' : 'other';
    const versions = pairData.characters[characterKey] || [];
    
    const newFields = [
      { name: 'text', label: '메시지 내용', type: 'textarea', placeholder: '추가할 내용을 입력하세요...' },
      { name: 'sender', label: '캐릭터 선택', type: 'select', options: [
          { value: 'Me', label: (pairData.characters.me[0]?.name || 'A 캐릭터') },
          { value: 'Other', label: (pairData.characters.other[0]?.name || 'B 캐릭터') },
      ]},
      { name: 'characterVersionId', label: '프로필 버전', type: 'select', options: versions.map(v => ({ value: v.id, label: v.name }))}
    ];

    if (JSON.stringify(newFields) !== JSON.stringify(dialogState.fields)) {
      setDialogState(prev => ({ ...prev, fields: newFields }));
    }
  }, [dialogState.isOpen, dialogState.formData, dialogState.fields, pairData.characters]);


  const closeContextMenu = () => setContextMenu(prev => ({ ...prev, isOpen: false }));
  
  const handleSetAsBackground = (imageBlob) => {
    const callback = (croppedDataUrl) => { onUpdateBackgroundImage(pairData.id, croppedDataUrl); };
    openImageCropper(imageBlob, 16 / 9, callback);
    
    const img = new Image();
    const objectURL = URL.createObjectURL(imageBlob);
    img.src = objectURL;
    img.onload = () => {
      try {
        const colorThief = new ColorThief();
        const palette = colorThief.getPalette(img, 8);
        const newThemes = generateThemesFromPalette(palette);
        setThemeOptions(newThemes);
        setIsThemeSelectorOpen(true);
      } catch(e) { console.error("테마 생성 실패", e); alert("테마를 생성하는 데 실패했습니다."); } 
      finally { URL.revokeObjectURL(objectURL); }
    };
    img.onerror = () => { alert("이미지를 불러오는 데 실패하여 테마를 생성할 수 없습니다."); URL.revokeObjectURL(objectURL); }
  };

  const handleThemeSelected = (selectedTheme) => { onUpdateTheme(pairData.id, selectedTheme); setIsThemeSelectorOpen(false); setThemeOptions([]); };
  const handleAddNewSlideImage = (imageFile) => { const callback = async (croppedDataUrl) => { try { const imageBlob = await (await fetch(croppedDataUrl)).blob(); const imageId = await db.images.add({ data: imageBlob }); onAddSlideImage(pairData.id, imageId); } catch (error) { console.error("크롭된 배너 이미지 저장 실패:", error); } }; openImageCropper(imageFile, 16 / 9, callback); };
  const handleCropComplete = (croppedDataUrl) => { if (onCropSuccess && typeof onCropSuccess === 'function') { onCropSuccess(croppedDataUrl); } setIsCropperOpen(false); setImageToCrop(null); setOnCropSuccess(null); };
  const handleCloseCropper = () => { setIsCropperOpen(false); setImageToCrop(null); setOnCropSuccess(null); };

  const handleDataImport = (parsedMessages) => {
    if (parsedMessages && parsedMessages.length > 0 && selectedConversationId) {
      onImportMessages(selectedConversationId, parsedMessages);
      setIsImportModalOpen(false);
    }
  };
  
  const selectedConversation = (pairData.conversations || []).find(c => c.id === selectedConversationId);
  const bookmarkedMessages = selectedConversation?.messages.filter(m => m.bookmarked) || [];

  const theme = pairData.theme || {};
  const themeStyles = {
    '--app-bg': theme.appBg,
    '--border-color': theme.borderColor,
    '--header-title-color': theme.headerTitleColor,
    '--sidebar-bg': theme.sidebarBg,
    '--sidebar-input-bg': theme.sidebarInputBg,
    '--header-bg': theme.headerBg,
    '--footer-bg': theme.footerBg,
    '--chat-bg': theme.chatBg,
    '--input-bg': theme.inputBg,
    '--bubble-me-bg': theme.bubbleMeBg,
    '--bubble-other-bg': theme.bubbleOtherBg,
    '--name-me-color': theme.nameMeColor,
    '--name-other-color': theme.nameOtherColor,
    '--text-color': theme.textColor,
    '--button-bg': theme.buttonBg,
    '--media-max-width': `${theme.mediaMaxWidth || 400}px`,
  };

  return (
    <div className="workspace-container" style={themeStyles}>
      <ConversationList pairId={pairData.id} conversations={pairData.conversations} selectedConversationId={selectedConversationId} onSelectConversation={handleSelectConversation} onAddConversation={onAddConversation} slideImages={pairData.slideImages} onSelectSlideImage={handleSetAsBackground} onAddSlideImage={handleAddNewSlideImage} onDeleteSlideImage={(imageId) => onDeleteSlideImage(pairData.id, imageId)} onEditConversation={onEditConversation} onDeleteConversation={onDeleteConversation} />
      <div className="main-content-area">
        <header className="workspace-header">
          <button className="back-button" onClick={onGoToDashboard} title="대시보드로 돌아가기"><i className="fas fa-arrow-left"></i></button>
          <h2>{pairData.title}</h2>
          <button className="theme-edit-btn" onClick={() => setIsPairSettingsModalOpen(true)} title="제목 및 태그 수정"><i className="fas fa-pencil-alt"></i></button>
          <button className="theme-edit-btn" onClick={() => setIsCharacterModalOpen(true)} title="캐릭터 설정"><i className="fas fa-users-cog"></i></button>
          <button className="theme-edit-btn" onClick={() => setIsThemeModalOpen(true)} title="테마 편집"><i className="fas fa-palette"></i></button>
          <button className="theme-edit-btn" onClick={() => stickerInputRef.current?.click()} disabled={!selectedConversationId} title="이미지 스티커 추가"><i className="fas fa-image"></i></button>
          <button className="theme-edit-btn" onClick={() => setIsTextStickerModalOpen(true)} disabled={!selectedConversationId} title="텍스트 스티커 추가"><i className="fas fa-font"></i></button>
          <button 
            className="theme-edit-btn" 
            onClick={() => setIsImportModalOpen(true)} 
            disabled={!selectedConversationId} 
            title="데이터 불러오기"
          >
            <i className="fas fa-file-import"></i>
          </button>
          <button 
            className="theme-edit-btn" 
            onClick={() => setIsBookmarkPanelOpen(!isBookmarkPanelOpen)} 
            disabled={!selectedConversationId} 
            title="북마크 목록"
          >
            <i className="fas fa-bookmark"></i>
          </button>
        </header>
        {selectedConversation ? ( 
            <MessageView 
                log={selectedConversation} 
                characters={pairData.characters} 
                onAddMessage={handleAddMessageRequest}
                onMessageContextMenu={handleMessageContextMenu}
                onUpdateStickers={(newStickers) => onUpdateStickers(selectedConversation.id, newStickers)}
                onAvatarClick={handleAvatarClick}
                scrollToMessageId={scrollToMessageId}
                onScrollComplete={() => setScrollToMessageId(null)}
                onSetComment={handleSetCommentForNewMessage}
            /> 
        ) : ( <div className="placeholder">왼쪽에서 대화 로그를 선택하거나 새 로그를 추가하세요.</div> )}
      </div>
      
      {popoverState.isOpen && (
        <ProfilePopover
          character={popoverState.character}
          anchorEl={popoverState.anchorEl}
          onClose={handleClosePopover}
        />
      )}

      <BookmarkPanel
        isOpen={isBookmarkPanelOpen}
        onClose={() => setIsBookmarkPanelOpen(false)}
        bookmarks={bookmarkedMessages}
        onBookmarkClick={handleGoToBookmark}
        characters={pairData.characters}
      />

      <input type="file" ref={stickerInputRef} style={{ display: 'none' }} accept="image/png, image/gif, image/jpeg, image/webp" onChange={handleStickerFileSelect}/>
      <ThemeSelectionModal isOpen={isThemeSelectorOpen} onClose={() => setIsThemeSelectorOpen(false)} themes={themeOptions} onSelectTheme={handleThemeSelected}/>
      
      <TextStickerModal
        isOpen={isTextStickerModalOpen}
        onClose={() => setIsTextStickerModalOpen(false)}
        onAdd={handleAddTextSticker}
      />
      
      <DataImportModal
        isOpen={isImportModalOpen}
        onClose={() => setIsImportModalOpen(false)}
        onImport={handleDataImport}
        characters={pairData.characters}
      />

      <SettingsModal isOpen={isThemeModalOpen} onClose={() => setIsThemeModalOpen(false)} title="워크스페이스 테마 편집">
        <ThemeEditor theme={pairData.theme} onThemeChange={(newTheme) => onUpdateTheme(pairData.id, newTheme)} options={workspaceThemeOptions} />
      </SettingsModal>
      <CharacterSettingsModal isOpen={isCharacterModalOpen} onClose={() => setIsCharacterModalOpen(false)} pairData={pairData} onUpdate={onUpdateCharacters} onOpenCropper={openImageCropper} />
      <PairSettingsModal isOpen={isPairSettingsModalOpen} onClose={() => setIsPairSettingsModalOpen(false)} pairData={pairData} onSave={(updatedDetails) => onUpdatePairDetails(pairData.id, updatedDetails)} />
      <ImageCropModal isOpen={isCropperOpen} onClose={handleCloseCropper} imageSrc={imageToCrop} onCropComplete={handleCropComplete} aspectRatio={cropAspectRatio} />
      
      <RichTextEditModal
        isOpen={!!editingMessage}
        onClose={() => setEditingMessage(null)}
        initialContent={editingMessage?.content}
        initialSender={editingMessage?.sender}
        initialVersionId={editingMessage?.characterVersionId}
        characters={pairData.characters}
        onSave={(updatedData) => {
          onEditMessage(selectedConversationId, editingMessage.id, updatedData);
          setEditingMessage(null);
        }}
      />
      
      {contextMenu.isOpen && ( <ContextMenu position={contextMenu.position} items={contextMenu.items} onClose={closeContextMenu} /> )}
      
      <InputDialog 
        isOpen={dialogState.isOpen} 
        title={dialogState.title} 
        fields={dialogState.fields}
        initialData={dialogState.formData}
        onConfirm={(formData) => {
          dialogState.onConfirm(formData);
        }} 
        onCancel={closeDialog} 
      />
    </div>
  );
};

export default Workspace;


// ======================================================
// File: src\tiptapExtensions\Comment.js
// ======================================================

// File: src/tiptapExtensions/Comment.js (새 파일)

import { Mark } from '@tiptap/core';

export const Comment = Mark.create({
  name: 'comment',

  addOptions() {
    return {
      HTMLAttributes: {},
    };
  },

  addAttributes() {
    return {
      comment: {
        default: null,
      },
    };
  },

  parseHTML() {
    return [
      {
        tag: 'span[data-comment]',
        getAttrs: element => {
          const comment = element.getAttribute('data-comment');
          // comment 속성이 존재할 경우에만 마크를 생성합니다.
          return comment ? { comment } : false;
        },
      },
    ];
  },

  renderHTML({ HTMLAttributes }) {
    // 렌더링 시 주석 내용을 data-comment 속성에 담고, 스타일링을 위한 클래스를 추가합니다.
    return [
      'span',
      {
        class: 'comment-highlight',
        'data-comment': HTMLAttributes.comment,
      },
      0, // 마크가 적용된 콘텐츠가 위치할 곳입니다.
    ];
  },

  addCommands() {
    return {
      setComment: attributes => ({ commands }) => {
        return commands.setMark(this.name, attributes);
      },
      toggleComment: attributes => ({ commands }) => {
        return commands.toggleMark(this.name, attributes);
      },
      unsetComment: () => ({ commands }) => {
        // 선택 영역 없이 커서만 있어도 마크를 제거할 수 있도록 합니다.
        return commands.unsetMark(this.name, { extendEmptyMarkRange: true });
      },
    };
  },
});

export default Comment;


// ======================================================
// File: src\tiptapExtensions\FontSize.js
// ======================================================

// 파일: src/tiptapExtensions/FontSize.js

import { Mark } from '@tiptap/core';
import { TextStyle } from '@tiptap/extension-text-style';

export const FontSize = Mark.create({
  name: 'fontSize',

  addOptions() {
    return {
      types: ['textStyle'],
    };
  },

  addAttributes() {
    return {
      fontSize: {
        default: null,
        parseHTML: element => element.style.fontSize.replace(/['"]+/g, ''),
        renderHTML: attributes => {
          if (!attributes.fontSize) {
            return {};
          }
          return {
            style: `font-size: ${attributes.fontSize}`,
          };
        },
      },
    };
  },

  parseHTML() {
    return [
      {
        style: 'font-size',
        getAttrs: value => ({ fontSize: value }),
      },
    ];
  },

  renderHTML({ HTMLAttributes }) {
    return ['span', HTMLAttributes, 0];
  },

  addCommands() {
    return {
      setFontSize: (fontSize) => ({ chain }) => {
        return chain()
          .setMark('textStyle', { fontSize })
          .run();
      },
      unsetFontSize: () => ({ chain }) => {
        return chain()
          .setMark('textStyle', { fontSize: null })
          .removeEmptyTextStyle()
          .run();
      },
    };
  },
});

TextStyle.configure({
    HTMLAttributes: {
        class: null,
    },
});

export default FontSize;


// ======================================================
// File: src\App.css
// ======================================================

/* File: src/App.css */

/* --- 0. 기본 설정 및 폰트 임포트 --- */
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@300;400;500;700&family=Source+Code+Pro:wght@400;600&display=swap');

@font-face {
    font-family: 'Paperozi';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2408-3@1.0/Paperlogy-1Thin.woff2') format('woff2');
    font-weight: 100;
    font-display: swap;
}
@font-face {
    font-family: 'Paperozi';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2408-3@1.0/Paperlogy-2ExtraLight.woff2') format('woff2');
    font-weight: 200;
    font-display: swap;
}
@font-face {
    font-family: 'Paperozi';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2408-3@1.0/Paperlogy-3Light.woff2') format('woff2');
    font-weight: 300;
    font-display: swap;
}
@font-face {
    font-family: 'Paperozi';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2408-3@1.0/Paperlogy-4Regular.woff2') format('woff2');
    font-weight: 400;
    font-display: swap;
}
@font-face {
    font-family: 'Paperozi';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2408-3@1.0/Paperlogy-5Medium.woff2') format('woff2');
    font-weight: 500;
    font-display: swap;
}
@font-face {
    font-family: 'Paperozi';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2408-3@1.0/Paperlogy-6SemiBold.woff2') format('woff2');
    font-weight: 600;
    font-display: swap;
}
@font-face {
    font-family: 'Paperozi';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2408-3@1.0/Paperlogy-7Bold.woff2') format('woff2');
    font-weight: 700;
    font-display: swap;
}
@font-face {
    font-family: 'Paperozi';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2408-3@1.0/Paperlogy-8ExtraBold.woff2') format('woff2');
    font-weight: 800;
    font-display: swap;
}
@font-face {
    font-family: 'Paperozi';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2408-3@1.0/Paperlogy-9Black.woff2') format('woff2');
    font-weight: 900;
    font-display: swap;
}
@font-face {
    font-family: 'Presentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-1Thin.woff2') format('woff2');
    font-weight: 100;
    font-display: swap;
}
@font-face {
    font-family: 'Presentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-2ExtraLight.woff2') format('woff2');
    font-weight: 200;
    font-display: swap;
}
@font-face {
    font-family: 'Presentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-3Light.woff2') format('woff2');
    font-weight: 300;
    font-display: swap;
}
@font-face {
    font-family: 'Presentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-4Regular.woff2') format('woff2');
    font-weight: 400;
    font-display: swap;
}
@font-face {
    font-family: 'Presentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-5Medium.woff2') format('woff2');
    font-weight: 500;
    font-display: swap;
}
@font-face {
    font-family: 'Presentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-6SemiBold.woff2') format('woff2');
    font-weight: 600;
    font-display: swap;
}
@font-face {
    font-family: 'Presentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-7Bold.woff2') format('woff2');
    font-weight: 700;
    font-display: swap;
}
@font-face {
    font-family: 'Presentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-8ExtraBold.woff2') format('woff2');
    font-weight: 800;
    font-display: swap;
}
@font-face {
    font-family: 'Presentation';
    src: url('https://cdn.jsdelivr.net/gh/projectnoonnu/2404@1.0/Freesentation-9Black.woff2') format('woff2');
    font-weight: 900;
    font-display: swap;
}

/* --- CSS 변수 및 기본 스타일 --- */
:root {
  /* 레이아웃 색상 */
  --app-bg: #f0f2f5;
  --sidebar-bg: #ffffff;
  --header-bg: #ffffff;
  --chat-bg: #ffffff;
  --footer-bg: #ffffff;

  /* 요소 색상 */
  --bubble-me-bg: #5865f2;
  --bubble-other-bg: #e9ecef;
  --button-bg: #5865f2;
  --input-bg: #f0f2f5;
  --sidebar-input-bg: #f0f2f5;

  /* 텍스트 색상 */
  --text-color: #212529;
  --text-muted: #868e96;
  --header-title-color: #212529; /* [신규] 헤더 제목 */
  --name-me-color: #5865f2;
  --name-other-color: #868e96;

  /* 기타 */
  --border-color: #e9ecef; /* [신규] 각종 테두리 */
  
  /* UI 디자인 시스템 변수 */
  --border-radius: 12px;
  --panel-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);

  /* 폰트 관련 변수 */
  --global-font-family: 'Paperozi', sans-serif;
  --global-font-size: 15px;
  --global-letter-spacing: 0px;
}

*, *::before, *::after { box-sizing: border-box; }
html { font-size: var(--global-font-size); }
body {
  margin: 0;
  background-color: var(--app-bg);
  color: var(--text-color);
  font-family: var(--global-font-family);
  letter-spacing: var(--global-letter-spacing);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  overflow: hidden;
}
input, button, textarea, select { font-family: inherit; font-size: 0.9rem; color: inherit; }

/* --- 1. 기본 레이아웃 --- */
.app-container-root {
  height: calc(100vh - 32px);
  width: 100vw;
  display: flex;
  flex-direction: column;
}

/* --- 2. 대시보드 --- */
.dashboard { 
  padding: 24px;
  overflow-y: auto; 
  flex-grow: 1; 
  background-color: var(--dashboardBg);
}
.dashboard-grid { 
  display: grid; 
  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); 
  gap: 24px;
}
.conversation-card, .add-log-card {
  background-color: #fff;
  border-radius: var(--border-radius);
  box-shadow: var(--panel-shadow);
  transition: transform 0.2s ease, box-shadow 0.2s ease;
  min-height: 160px;
  cursor: pointer;
}
.conversation-card:hover, .add-log-card:hover {
  border-color: var(--global-accent-color, #5865f2); /* ▼▼▼ 수정 ▼▼▼ */
  color: var(--global-accent-color, #5865f2); /* ▼▼▼ 수정 ▼▼▼ */
  background-color: #fff;
  box-shadow: var(--panel-shadow);
}
.add-log-card { 
  display: flex; 
  justify-content: center; 
  align-items: center; 
  border: 2px dashed var(--border-color);
  background-color: transparent;
  box-shadow: none;
  color: var(--text-muted);
  font-size: 1.5rem; 
}
.add-log-card:hover {
  border-color: var(--button-bg);
  color: var(--button-bg);
  background-color: #fff;
  box-shadow: var(--panel-shadow);
}

.conversation-card { 
  position: relative; 
  overflow: hidden; 
  background-size: cover; 
  background-position: center; 
  display: flex; 
  flex-direction: column; 
  justify-content: flex-end;
  padding: 1rem; 
}
.conversation-card::before { 
  content: ''; 
  position: absolute; 
  inset: 0; 
  background: linear-gradient(to top, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0) 60%);
}
.card-content { position: relative; z-index: 2; color: white; }
.card-title {
    font-size: 2rem;
    font-weight: 900;
    text-shadow: 1px 2px 8px rgb(0 0 0);
    place-self: center;
}
.card-tags { display: flex; flex-wrap: wrap; gap: 0.4rem; margin-top: 0.5rem; }
.tag-pill { background-color: rgba(255, 255, 255, 0.2); color: #fff; padding: 0.25rem 0.6rem; border-radius: 99px; font-size: 0.75rem; }
.card-avatars { display: none; }

/* --- 3. 워크스페이스 --- */
.workspace-container { 
  display: flex;
  height: 100%;
  width: 100%;
  padding: 16px;
  gap: 16px;
  background-color: var(--app-bg, #f0f2f5);
}
.conversation-list-container, .main-content-area {
  border-radius: var(--border-radius);
  box-shadow: var(--panel-shadow);
  overflow: hidden;
}

.main-content-area { 
  flex-grow: 1; 
  display: flex; 
  flex-direction: column; 
  background-color: var(--chat-bg); 
}
.workspace-header { 
  background-color: var(--header-bg); 
  padding: 0.5rem 1rem; 
  display: flex; 
  align-items: center; 
  gap: 0.5rem; 
  flex-shrink: 0; 
  height: 56px;
}
.workspace-header h2 { 
    margin: 0; 
    font-size: 1.1rem; 
    margin-right: auto; 
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--header-title-color); /* [수정] 변수 적용 */
}
.theme-edit-btn, .back-button { 
  background: none; border: none; font-size: 1.1rem; cursor: pointer; padding: 0.4rem; border-radius: 50%; width: 36px; height: 36px;
  display: flex; align-items: center; justify-content: center; color: var(--text-muted); transition: background-color 0.2s, color 0.2s;
}
.theme-edit-btn:hover, .back-button:hover { background-color: rgba(0, 0, 0, 0.05); color: var(--text-color); }
.placeholder { display: flex; justify-content: center; align-items: center; height: 100%; color: var(--text-muted); font-size: 1rem; }

/* --- 4. 사이드바 --- */
.conversation-list-container { 
  width: 320px; display: flex; flex-direction: column; background-color: var(--sidebar-bg); color: var(--text-color); flex-shrink: 0; border-right: none;
}

.conversation-list-slider { width: 100%; aspect-ratio: 16 / 9; position: relative; display: flex; justify-content: center; align-items: center; background-color: #202225; flex-shrink: 0; }
.slide-image-container { width: 100%; height: 100%; overflow: hidden; cursor: pointer; }
.slide-image-large { width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease; }
.slide-image-container:hover .slide-image-large { transform: scale(1.05); }

/* ▼▼▼ [핵심 수정] 화살표와 컨트롤 버튼 기본 상태 설정 ▼▼▼ */
.slider-arrow, .slider-controls {
  position: absolute;
  z-index: 10;
  opacity: 0; /* 기본적으로 투명하게 만듦 */
  pointer-events: none; /* 투명할 때 클릭되지 않도록 설정 */
  transition: opacity 0.2s ease-in-out; /* 부드러운 효과를 위한 트랜지션 */
}
/* ▲▲▲ [핵심 수정] ▲▲▲ */

/* ▼▼▼ [핵심 수정] 슬라이더에 마우스를 올렸을 때 버튼을 보이게 설정 ▼▼▼ */
.conversation-list-slider:hover .slider-arrow,
.conversation-list-slider:hover .slider-controls {
  opacity: 1; /* 마우스를 올리면 불투명하게 만듦 */
  pointer-events: auto; /* 다시 클릭 가능하도록 설정 */
}
/* ▲▲▲ [핵심 수정] ▲▲▲ */

.slider-arrow { top: 50%; transform: translateY(-50%); cursor: pointer; color: white; background-color: rgba(0, 0, 0, 0.4); padding: 0.5rem; border-radius: 50%; display: flex; align-items: center; justify-content: center; width: 20px; height: 20px; }
.slider-arrow.left { left: 10px; }
.slider-arrow.right { right: 10px; }
.slider-controls { bottom: 10px; right: 10px; display: flex; gap: 0.5rem; }
.slider-controls button { background-color: rgba(0, 0, 0, 0.6); border: none; color: white; width: 32px; height: 32px; border-radius: 50%; cursor: pointer; }
.slider-placeholder-large { width: 100%; height: 100%; display: flex; flex-direction: column; justify-content: center; align-items: center; color: #777; cursor: pointer; box-sizing: border-box; }
.slider-placeholder-large i { font-size: 2rem; margin-bottom: 0.5rem; }


.conversation-list-header { padding: 1rem; } /* [수정] 변수 적용 */
.add-conversation-form { display: flex; flex-direction: column; gap: 0.75rem; }
.add-conversation-form input[type="text"] {
    border-radius: 8px; background-color: var(--sidebar-input-bg); /* [수정] 변수 적용 */
    padding: 0.75rem; color: var(--text-color); transition: border-color 0.2s, box-shadow 0.2s; width: 100%;
}
.add-conversation-form input[type="text"]::placeholder { color: var(--text-muted); }
.add-conversation-form input[type="text"]:focus { outline: none; box-shadow: 0 0 0 2px var(--global-accent-color, #5865f2)33; } /* ▼▼▼ 수정 ▼▼▼ */
.tag-input-container:focus-within { outline: none; box-shadow: 0 0 0 2px var(--global-accent-color, #5865f2)33; } /* ▼▼▼ 수정 ▼▼▼ */
.add-conversation-form > button[type="submit"] {
  background-color: var(--global-accent-color, #5865f2); /* ▼▼▼ 핵심 수정 ▼▼▼ */
  color: white; cursor: pointer; font-weight: 500; border: none; border-radius: 8px; padding: 0.75rem; transition: opacity 0.2s;
}
.tag-input-container input { border: none; background: none; flex-grow: 1; padding: 0.75rem; }
.tag-input-container input:focus { outline: none; box-shadow: none; }
.tag-input-container button { flex-shrink: 0; padding: 0 0.75rem; cursor: pointer; background: none; border: none; color: var(--text-muted); } /* [수정] 변수 적용 */
.tags-preview { display: flex; flex-wrap: wrap; gap: 0.25rem; min-height: 24px; }
.tag-item-small { display: flex; align-items: center; gap: 0.25rem; background-color: var(--input-bg); color: var(--text-color); padding: 0.1rem 0.5rem; border-radius: 4px; font-size: 0.75rem; border: 1px solid var(--border-color); } /* [수정] 변수 적용 */
.tag-item-small button { background: none; border: none; color: var(--text-muted); font-size: 1rem; cursor: pointer; padding: 0; line-height: 1; height: auto; }
.add-conversation-form > button[type="submit"] {
  background-color: var(--button-bg); color: white; cursor: pointer; font-weight: 500; border: none; border-radius: 8px; padding: 0.75rem; transition: opacity 0.2s;
}
.add-conversation-form > button[type="submit"]:hover { opacity: 0.9; }

.conversation-list { list-style-type: none; padding: 0.5rem; margin: 0; overflow-y: auto; flex-grow: 1; }
.conversation-item { padding: 0.75rem 1rem; cursor: pointer; border-radius: 8px; transition: background-color 0.2s; border-bottom: none; }
.conversation-item:hover { background-color: var(--input-bg); }
.conversation-item.selected { 
  background-color: var(--button-bg, #5865f2); /* ▼▼▼ 핵심 수정 ▼▼▼ */
  color: white; 
}
.conversation-item-title { font-weight: 500; font-size: 0.95rem; }
.conversation-item-tags { display: flex; flex-wrap: wrap; gap: 0.3rem; margin-top: 0.3rem; }
.tag-pill-small { background-color: var(--input-bg); color: var(--text-muted); padding: 0.1rem 0.5rem; border-radius: 99px; font-size: 0.7rem; }
.conversation-item.selected .tag-pill-small { background-color: rgba(255, 255, 255, 0.2); color: #fff; }

/* --- 5. 채팅창 --- */
/* [신규] 스티커와 메시지 리스트를 감싸는 컨테이너 */
.message-view-content {
  position: relative; /* 스티커 위치의 기준점 */
  flex-grow: 1;       /* 남은 공간을 모두 차지 */
  overflow: hidden;   /* 내부 요소가 둥근 모서리를 벗어나지 않도록 */
}

/* [수정] 이제 메시지 전용 스크롤 컨테이너 역할만 합니다. */
.message-list { 
  position: absolute;
  inset: 0; /* 부모(.message-view-content)에 꽉 차게 설정 */
  overflow-y: auto;
  padding: 1.5rem; 
  display: flex;
  flex-direction: column;
  gap: 1rem; 
}

.message-row { display: flex; align-items: flex-start; gap: 0.75rem; max-width: 80%; }
.message-row.me { align-self: flex-end; flex-direction: row-reverse; }
.message-avatar { width: 36px; height: 36px; border-radius: 50%; object-fit: cover; flex-shrink: 0; }
.message-content-container { display: flex; flex-direction: column; }
.message-row.other .message-content-container { align-items: flex-start; }
.message-row.me .message-content-container { align-items: flex-end; }
.message-sender-name { font-size: 0.8rem; font-weight: 500; margin-bottom: 0.4rem; }
.message-row.me .message-sender-name { color: var(--name-me-color); }
.message-row.other .message-sender-name { color: var(--name-other-color); }
.message-bubble { padding: 0.75rem 1.1rem; border-radius: 20px; line-height: 1.6; box-shadow: 0 1px 2px rgba(0,0,0,0.05); white-space: pre-wrap; word-break: break-word; font-size: 0.95rem; }
.message-bubble.me { background-color: var(--bubble-me-bg); color: #ffffff; border-bottom-right-radius: 6px; }
.message-bubble.other { background-color: var(--bubble-other-bg); color: var(--text-color); border-bottom-left-radius: 6px; }

.add-message-form { 
  display: flex; padding: 1rem; gap: 0.75rem; background-color: var(--footer-bg);
  border-top: 1px solid var(--border-color); flex-shrink: 0; align-items: center;
}
.add-message-form select, .add-message-form textarea {
  border: 1px solid var(--border-color); background-color: var(--input-bg);
  border-radius: 8px; padding: 0.6rem; transition: border-color 0.2s, box-shadow 0.2s;
}
.add-message-form select:focus, .add-message-form textarea:focus { outline: none; border-color: var(--global-accent-color, #5865f2); box-shadow: 0 0 0 2px var(--global-accent-color, #5865f2)33; } /* ▼▼▼ 수정 ▼▼▼ */
.add-message-form textarea { flex-grow: 1; resize: none; }
.add-message-form button { padding: 0.6rem 1.2rem; border: none; background-color: var(--button-bg, #5865f2); color: white; border-radius: 8px; cursor: pointer; transition: opacity 0.2s; } /* ▼▼▼ 핵심 수정 ▼▼▼ */
.add-message-form button:hover { opacity: 0.9; }

/* --- 6. 모달 & 폼 공통 스타일 --- */
.modal-overlay { position: fixed; inset: 0; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1000; }
.modal-content { 
  background-color: #fff;
  color: #212529; /* [수정] 모달 텍스트 색상 고정 */
  padding: 1.5rem; border-radius: var(--border-radius); width: 90%; max-width: 520px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15); 
}
.modal-header { display: flex; justify-content: space-between; align-items: center; border-bottom: 1px solid var(--border-color); padding-bottom: 1rem; margin-bottom: 1.5rem; } /* [수정] 변수 적용 */
.modal-header h2 { margin: 0; font-size: 1.2rem; font-weight: 700; }
.modal-close-btn { background: none; border: none; font-size: 1.5rem; cursor: pointer; color: #aaa; }
.utility-panel { display: flex; flex-direction: column; gap: 1rem; }
.utility-panel .form-card { background-color: #f8f9fa; border-radius: var(--border-radius); padding: 1rem; border: 1px solid var(--border-color); } /* [수정] 변수 적용 */
.utility-panel .card-label { display: block; font-weight: 500; margin-bottom: 0.75rem; font-size: 0.85rem; }
.utility-panel input[type="text"] { 
  background-color: #fff; border-radius: 8px; border: 1px solid var(--border-color); /* [수정] 변수 적용 */
  padding: 0.75rem; color: #212529; font-size: 0.9rem; width: 100%; /* [수정] 모달 텍스트 색상 고정 */
}
.utility-panel input[type="text"]:focus { outline: none; border-color: var(--global-accent-color, #5865f2); box-shadow: 0 0 0 2px var(--global-accent-color, #5865f2)33; } /* ▼▼▼ 수정 ▼▼▼ */
.btn-primary { background-color: var(--global-accent-color, #5865f2); color: white; width: 100%; margin-top: 0.5rem; } /* ▼▼▼ 핵심 수정 ▼▼▼ */
 .btn-secondary, .btn-tertiary { padding: 0.8rem 1.2rem; border-radius: 8px; border: none; font-weight: 500; cursor: pointer; transition: opacity 0.2s; }
.btn-primary:hover, .btn-secondary:hover { opacity: 0.9; }
.btn-primary {
    /* background-color: var(--button-bg); */
    color: white;
    width: 100%;
    margin-top: 0.5rem;
    margin: 4px;
    padding: 10px;
    border-radius: 20px;
}
.btn-secondary { background-color: #e9ecef; color: #495057; }
.btn-tertiary { background: none; color: var(--text-muted); text-decoration: underline; }
.image-upload-grid { display: grid; grid-template-columns: 140px 1fr; gap: 1rem; align-items: center; }
.image-preview-box { width: 100%; aspect-ratio: 16/9; background-color: #f0f2f5; border: 1px dashed #ced4da; border-radius: 8px; display: flex; justify-content: center; align-items: center; overflow: hidden; }
.image-preview-instance { width: 100%; height: 100%; object-fit: cover; }
.image-placeholder { display: flex; flex-direction: column; align-items: center; gap: 0.5rem; color: #adb5bd; }
.image-placeholder i { font-size: 1.5rem; }
.image-placeholder span { font-size: 0.75rem; }
.upload-description { font-size: 0.8rem; color: var(--text-muted); margin: 0 0 0.75rem 0; }
.avatar-preview { width: 64px !important; height: 64px !important; border-radius: 50%; }
/* --- 7. 설정 패널 & 테마 에디터 (수정) --- */
.settings-panel { display: flex; flex-direction: column; gap: 1rem; }
.settings-section { border: 1px solid var(--border-color); border-radius: 8px; padding: 1rem; }
.settings-title { margin-top: 0; margin-bottom: 1rem; color: #000000; font-size: 1rem; } /* ▼▼▼ 수정 ▼▼▼ */
.font-control-group { margin-bottom: 1rem; }
.font-control-group:last-child { margin-bottom: 0; }
.font-control-group label { display: block; margin-bottom: 0.5rem; font-size: 0.9rem; }
.slider-container { display: flex; align-items: center; gap: 1rem; }
.slider-container input[type="range"] { flex-grow: 1; }
.slider-container span { font-family: monospace; font-size: 0.85rem; min-width: 50px; text-align: right; }
.settings-panel select { background-color: #f8f9fa; color: #212529; border: 1px solid var(--border-color); padding: 0.5rem; border-radius: 5px; width: 100%; }

/* ▼▼▼ 테마 에디터 탭 UI 스타일 (신규) ▼▼▼ */
.theme-editor-container {
  display: flex;
  flex-direction: column;
}
.theme-editor-tabs {
  display: flex;
  border-bottom: 1px solid var(--border-color);
  margin-bottom: 1rem;
}
.tab-btn {
  padding: 0.75rem 1rem;
  border: none;
  background: none;
  cursor: pointer;
  font-size: 0.9rem;
  color: var(--text-muted);
  border-bottom: 2px solid transparent;
  margin-bottom: -1px; /* 부모의 border와 겹치도록 */
}
.tab-btn.active {
  color: #000; /* ▼▼▼ 수정 ▼▼▼ */
  border-bottom-color: var(--global-accent-color, #5865f2); /* ▼▼▼ 수정 ▼▼▼ */
  font-weight: 500;
}
.theme-editor-content {
  padding: 0.5rem 0;
}
.theme-editor-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}
.theme-option { display: flex; flex-direction: column; gap: 0.5rem; }
.theme-option label { font-size: 0.85rem; }
.color-input-wrapper { display: flex; align-items: center; gap: 0.75rem; }
.color-input-wrapper input[type="color"] { width: 28px; height: 28px; border: none; padding: 0; border-radius: 5px; background: none; cursor: pointer; }
/* ▼▼▼ [핵심 수정] span 스타일을 제거하고 input[type="text"] 스타일 추가 ▼▼▼ */
.color-input-wrapper .color-text-input {
  font-family: monospace;
  font-size: 0.85rem;
  width: 80px;
  padding: 4px 6px;
  border-radius: 4px;
  border: 1px solid var(--border-color);
  background-color: white;
  text-align: center;
}
.layout-settings-grid {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
/* ▲▲▲ 테마 에디터 탭 UI 스타일 (신규) ▲▲▲ */

/* --- 8. 컨텍스트 메뉴 --- */
.context-menu {
  position: fixed; z-index: 1001; background-color: #fff; border-radius: 8px;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1); padding: 0.4rem 0; min-width: 160px; border: 1px solid rgba(0,0,0,0.05);
}
.context-menu ul { list-style: none; padding: 0; margin: 0; }
.context-menu li { padding: 0.6rem 1rem; cursor: pointer; color: #212529; font-size: 0.9rem; transition: background-color 0.1s; } /* [수정] 텍스트 색상 고정 */
.context-menu li:hover { background-color: var(--input-bg); }
.context-menu li.delete { color: #e53e3e; }
.context-menu li.delete:hover { background-color: #e53e3e; color: white; }
.context-menu li.separator { height: 1px; background-color: var(--border-color); margin: 0.4rem 0; padding: 0; } /* [수정] 변수 적용 */
.context-menu li.separator:hover { background-color: var(--border-color); } /* [수정] 변수 적용 */

/* --- 9. 이미지 크롭 모달 --- */
.modal-content.image-crop-modal-content { max-width: 800px; }
/* ▼▼▼ [새로 추가] 캐릭터 설정 모달 전용 스타일 ▼▼▼ */
.modal-content.character-settings-modal-content {
  max-width: 840px;
}
.character-settings-form .character-form-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}
.character-profile-editor {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
.character-editor-title {
  margin: 0;
  padding-bottom: 0.75rem;
  border-bottom: 1px solid var(--border-color);
  font-size: 1rem;
  font-weight: 700;
}
.character-profile-editor .form-card input,
.character-profile-editor .form-card textarea {
  width: 100%;
  box-sizing: border-box;
  margin-top: 0.5rem;
  background-color: #fff;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  padding: 0.5rem;
}
.character-profile-editor .file-upload-controls input { margin-bottom: 0.5rem; }
.character-profile-editor .file-upload-controls input:first-child {
  margin-bottom: 0.5rem; /* 버전 이름과 사용자명 입력창 사이 간격 */
}
.character-profile-editor .file-upload-controls input:last-child { margin-bottom: 0; }
.character-profile-editor .banner-preview {
  aspect-ratio: 3 / 1;
  width: 100%;
  cursor: pointer;
}

/* ▼▼▼ [신규] 버전 관리 UI 스타일 ▼▼▼ */
.form-card.version-manager {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}
.version-manager select {
  flex-grow: 1;
  padding: 0.5rem;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background-color: #fff;
}
.version-buttons {
  display: flex;
  gap: 0.25rem;
}
.version-buttons button {
  width: 32px;
  height: 32px;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background-color: #fff;
  cursor: pointer;
  color: var(--text-muted);
  transition: background-color 0.2s, color 0.2s, border-color 0.2s;
}
.version-buttons button:hover {
  background-color: var(--input-bg);
  color: var(--text-color);
}
.version-buttons button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  background-color: #f8f9fa;
}

.color-picker-group {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 1rem;
}
.color-picker-group label { font-size: 0.85rem; font-weight: 500; }
.color-picker-group input[type="color"] {
  width: 28px; height: 28px; border: 1px solid var(--border-color); padding: 2px;
  border-radius: 5px; background: none; cursor: pointer;
}
.color-picker-group span { color: var(--text-muted); }
/* ▲▲▲ [새로 추가] 캐릭터 설정 모달 전용 스타일 ▲▲▲ */
.crop-container { width: 100%; height: 60vh; max-height: 500px; background-color: #000; margin-bottom: 1rem; }

.crop-button { width: 100%; padding: 0.8rem; border: none; background-color: var(--global-accent-color, #5865f2); color: white; font-size: 1rem; border-radius: 8px; cursor: pointer; } /* ▼▼▼ 핵심 수정 ▼▼▼ */

/* --- 10. 입력 다이얼로그 (InputDialog) --- */
.input-dialog-form .form-card { padding: 0; background: none; border: none; }
.input-dialog-form textarea, .input-dialog-form select {
  background-color: #f8f9fa; border-radius: 8px; border: 1px solid var(--border-color); /* [수정] 변수 적용 */
  padding: 0.75rem; color: #212529; font-size: 0.9rem; width: 100%; /* [수정] 텍스트 색상 고정 */
}
.input-dialog-form textarea { resize: vertical; }
.dialog-buttons { display: flex; justify-content: flex-end; gap: 0.75rem; margin-top: 1.5rem; }
.dialog-buttons .btn-primary, .dialog-buttons .btn-secondary { width: auto; margin-top: 0; }

/* --- 11. 이미지 로딩 플레이스홀더 --- */
.image-loading-placeholder { background-color: #e9ecef; animation: pulse 1.5s infinite ease-in-out; }
@keyframes pulse { 0% { background-color: #e9ecef; } 50% { background-color: #f8f9fa; } 100% { background-color: #e9ecef; } }

/* --- 12. 스티커 스타일 --- */
.sticker-wrapper { position: absolute; cursor: move; z-index: 10; user-select: none; }
.sticker-wrapper.selected { outline: 2px solid var(--global-accent-color, #5865f2); outline-offset: 4px; } /* ▼▼▼ 수정 ▼▼▼ */
.sticker-image { width: 100%; height: 100%; object-fit: contain; pointer-events: none; }
.sticker-handle {
  position: absolute; width: 24px; height: 24px; background-color: var(--global-accent-color, #5865f2); color: white; border-radius: 50%; /* ▼▼▼ 핵심 수정 ▼▼▼ */
  display: flex; align-items: center; justify-content: center; font-size: 12px; box-shadow: 0 2px 4px rgba(0,0,0,0.3); z-index: 11;
}
.rotate-handle { top: -12px; left: 50%; transform: translateX(-50%); cursor: alias; }
.resize-handle { bottom: -12px; right: -12px; cursor: se-resize; }

/* --- 13. 테마 선택 모달 --- */
.theme-selection-description { margin-top: 0; margin-bottom: 1.5rem; color: var(--text-muted); text-align: center; }
.theme-previews-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 1rem; }
.theme-preview-card {
  border: 1px solid var(--border-color); border-radius: 8px; padding: 0.75rem; /* [수정] 변수 적용 */
  cursor: pointer; transition: all 0.2s ease; background-color: #fff;
}
.theme-preview-card:hover { transform: translateY(-4px); box-shadow: 0 4px 10px rgba(0,0,0,0.1); border-color: var(--global-accent-color, #5865f2); } /* ▼▼▼ 수정 ▼▼▼ */
.theme-preview-title { margin: 0 0 0.75rem 0; text-align: center; font-size: 0.9rem; font-weight: 500; }
.theme-preview-palette { display: flex; justify-content: center; gap: 0.5rem; height: 32px; }
.theme-preview-colorbox { flex: 1; border-radius: 5px; display: flex; align-items: center; justify-content: center; font-size: 0.7rem; font-weight: bold; }

/* --- 14. 미디어 및 임베드 메시지 스타일 --- */

/* 메시지 입력창 파일 첨부 버튼 */
.add-message-form .attach-file-btn {
  background: none; border: none; font-size: 1.2rem; color: var(--text-muted); cursor: pointer; padding: 0.5rem;
  border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center;
  transition: background-color 0.2s, color 0.2s;
}
.add-message-form .attach-file-btn:hover { background-color: var(--input-bg); color: var(--text-color); }
.add-message-form button[type="submit"] { padding: 0.6rem 1.2rem; }

/* 미디어가 포함된 말풍선 스타일 조정 */
.message-bubble.media {
  padding: 0; background-color: transparent; box-shadow: none;
  max-width: var(--media-max-width, 400px);
  overflow: hidden; border-radius: 16px;
}

/* 이미지 및 비디오 스타일 */
.message-media {
  display: block; width: 100%; height: auto;
  max-height: 500px;
  object-fit: contain;
  cursor: pointer; border-radius: 16px;
}

/* 미디어 로딩 플레이스홀더 */
.media-loading-placeholder {
  width: 300px; height: 200px; background-color: #e9ecef; border-radius: 16px;
  display: flex; align-items: center; justify-content: center; color: var(--text-muted);
  animation: pulse 1.5s infinite ease-in-out;
}

/* ▼▼▼ 핵심 수정: 썸네일 스타일을 모두 제거하고 임베드 컨테이너 스타일만 남깁니다. ▼▼▼ */
/* --- 15. 임베드 컨테이너 스타일 --- */
.embed-container {
  width: var(--media-max-width, 400px);
  max-width: 100%; 
  border-radius: 16px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}
.embed-container.youtube { 
  aspect-ratio: 16 / 9; 
}
.embed-container.spotify { 
  height: 152px; 
  width: 100%;
  max-width: var(--media-max-width, 400px);
}
.embed-container iframe { 
  width: 100%; 
  height: 100%; 
  border: none; 
}


/* --- 16. Tiptap 에디터 및 콘텐츠 스타일 --- */
/* (이하 Tiptap 스타일은 변경 없음) */
.add-message-form .editor-container {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  background-color: var(--input-bg);
  transition: border-color 0.2s, box-shadow 0.2s;
}
.add-message-form .editor-container:focus-within {
  border-color: var(--global-accent-color, #5865f2); /* ▼▼▼ 수정 ▼▼▼ */
  box-shadow: 0 0 0 2px var(--global-accent-color, #5865f2)33; /* ▼▼▼ 수정 ▼▼▼ */
}
.tiptap-editor-wrapper {
  display: flex;
  flex-direction: column;
}
.editor-toolbar {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.25rem 0.5rem;
  border-bottom: 1px solid var(--border-color);
}
.editor-toolbar button {
  background: none; border: none; width: 28px; height: 28px;
  border-radius: 4px; cursor: pointer; color: var(--text-muted); font-size: 0.9rem;
}
.editor-toolbar button:hover {
  background-color: rgba(0,0,0,0.05);
}
.editor-toolbar button.is-active {
  background-color: var(--global-accent-color, #5865f2); /* ▼▼▼ 핵심 수정 ▼▼▼ */
  color: white;
}
.font-size-selector {
  border: 1px solid var(--border-color); border-radius: 4px;
  background-color: var(--sidebar-bg); padding: 0.2rem 0.4rem; font-size: 0.8rem;
}
.ProseMirror {
  padding: 0.6rem; min-height: 44px; max-height: 150px;
  overflow-y: auto; outline: none; line-height: 1.6;
}
.ProseMirror p {
  margin: 0;
}
.ProseMirror p.is-editor-empty:first-child::before {
  content: attr(data-placeholder); float: left; color: #adb5bd;
  pointer-events: none; height: 0;
}
.message-text p {
  margin: 0;
}
.message-text p + p {
  margin-top: 0.5em;
}
.message-text sup {
  vertical-align: super;
  font-size: smaller;
}
.message-text sub {
  vertical-align: sub;
  font-size: smaller;
}
.rich-text-edit-container .tiptap-editor-wrapper {
  border: 1px solid var(--border-color);
  border-radius: 8px;
  margin-bottom: 1.5rem;
}
.rich-text-edit-container .ProseMirror {
  min-height: 120px;
}
.rich-text-edit-container .dialog-buttons {
  justify-content: flex-end;
}

/* --- 17. 프로필 팝오버 스타일 --- */
.profile-popover {
  position: fixed;
  width: 340px;
  background-color: #18191c;
  color: #dcddde;
  border-radius: var(--border-radius);
  box-shadow: 0 8px 24px rgba(0,0,0,0.3);
  z-index: 1002;
  overflow: hidden;
  transition: opacity 0.1s ease-in-out;
}
.popover-banner {
  position: relative;
  height: 100px;
  background-color: #232428;
}
.popover-banner .popover-header {
  position: absolute;
  inset: 0;
  z-index: 1;
}
.popover-banner img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  position: relative;
  z-index: 2;
}
.popover-avatar-wrapper {
  position: absolute;
  top: 52px;
  left: 16px;
  padding: 6px;
  background-color: #18191c;
  border-radius: 50%;
  z-index: 3;
}
.popover-avatar {
  width: 80px;
  height: 80px;
  border-radius: 50%;
  overflow: hidden;
  background-color: #36393f;
}
.popover-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}
.popover-content {
  padding: 60px 16px 16px 16px;
}
.popover-names {
  display: flex;
  align-items: baseline;
  gap: 0.5rem;
}
.popover-display-name {
  font-size: 1.2rem;
  font-weight: 700;
  color: #fff;
}
.popover-username {
  font-size: 0.85rem;
  color: #b9bbbe;
}
.popover-status {
  margin-top: 0.5rem;
  font-size: 0.85rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}
.popover-divider {
  height: 1px;
  background-color: rgba(255, 255, 255, 0.06);
  margin: 1rem 0;
}
.popover-memo h4 {
  font-size: 0.75rem;
  font-weight: 700;
  color: #b9bbbe;
  text-transform: uppercase;
  margin: 0 0 0.5rem 0;
}
.popover-memo p {
  font-size: 0.85rem;
  margin: 0;
  white-space: pre-wrap;
  word-break: break-word;
}
.popover-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-top: 1rem;
}
.popover-tag-pill {
  background-color: #292b2f;
  padding: 0.25rem 0.6rem;
  border-radius: 4px;
  font-size: 0.8rem;
  font-weight: 500;
  border: 1px solid rgba(255, 255, 255, 0.1);
}

/* --- 18. 북마크 패널 스타일 (새로 추가) --- */
.bookmark-panel-overlay {
  position: fixed;
  inset: 0;
  background-color: rgba(0, 0, 0, 0.4);
  z-index: 998;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease-in-out;
}
.bookmark-panel-overlay.open {
  opacity: 1;
  pointer-events: auto;
}

.bookmark-panel {
  position: fixed;
  top: 32px; /* TitleBar 높이 */
  right: 0;
  bottom: 0;
  width: 340px;
  background-color: var(--sidebar-bg, #fff);
  box-shadow: -4px 0 15px rgba(0, 0, 0, 0.1);
  z-index: 999;
  transform: translateX(100%);
  transition: transform 0.3s ease-in-out;
  display: flex;
  flex-direction: column;
}
.bookmark-panel.open {
  transform: translateX(0);
}

.bookmark-panel-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1rem;
  border-bottom: 1px solid var(--border-color, #e9ecef);
  flex-shrink: 0;
}
.bookmark-panel-header h3 {
  margin: 0;
  font-size: 1.1rem;
  color: var(--text-color);
  display: flex;
  align-items: center;
  gap: 0.5rem;
}
.panel-close-btn {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: var(--text-muted);
}

.bookmark-list {
  padding: 0.5rem;
  overflow-y: auto;
  flex-grow: 1;
}

.bookmark-item {
  display: flex;
  gap: 0.75rem;
  padding: 0.75rem;
  border-radius: 8px;
  cursor: pointer;
  transition: background-color 0.2s;
  border-bottom: 1px solid var(--border-color, #e9ecef);
}
.bookmark-item:last-child {
  border-bottom: none;
}
.bookmark-item:hover {
  background-color: var(--input-bg, #f0f2f5);
}

.bookmark-item-avatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  overflow: hidden;
  flex-shrink: 0;
  background-color: var(--border-color);
}
.bookmark-item-avatar img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.bookmark-item-content {
  display: flex;
  flex-direction: column;
  gap: 0.2rem;
  overflow: hidden;
}
.bookmark-item-sender {
  font-weight: 500;
  font-size: 0.9rem;
  color: var(--text-color);
}
.bookmark-item-text {
  font-size: 0.85rem;
  color: var(--text-muted);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.bookmark-empty {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100%;
  padding: 2rem;
  text-align: center;
  color: var(--text-muted);
}
.bookmark-empty i {
  font-size: 3rem;
  margin-bottom: 1rem;
  opacity: 0.5;
}
.bookmark-empty p {
  font-size: 1rem;
  font-weight: 500;
  margin: 0 0 0.5rem 0;
}
.bookmark-empty span {
  font-size: 0.8rem;
}

/* 메시지 내 북마크 아이콘 */
.message-bubble {
  position: relative; /* 아이콘 위치 기준 */
}
.message-bookmark-icon {
  position: absolute;
  top: -4px;
  right: -4px;
  font-size: 0.7rem;
  color: var(--button-bg);
  text-shadow: 0 0 3px rgba(0,0,0,0.5);
}

/* 스크롤 시 하이라이트 효과 */
.message-row.highlighted .message-bubble {
  animation: highlight-anim 1.5s ease-out;
}
@keyframes highlight-anim {
  0% { background-color: var(--bubble-me-bg); } /* me, other 분기 필요 */
  50% { background-color: #ffc107; }
  100% { background-color: var(--bubble-me-bg); }
}

.message-row.me.highlighted .message-bubble {
  animation-name: highlight-me;
}
@keyframes highlight-me {
  from, to { background-color: var(--bubble-me-bg); }
  50% { background-color: #ffc107; }
}

.message-row.other.highlighted .message-bubble {
  animation-name: highlight-other;
}
@keyframes highlight-other {
  from, to { background-color: var(--bubble-other-bg); }
  50% { background-color: #ffc107; }
}

/* --- 19. 공용 태그 입력 컴포넌트 스타일 (신규 추가) --- */
.tag-input-container {
  display: flex;
  background-color: #fff;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  transition: border-color 0.2s, box-shadow 0.2s;
  overflow: hidden; /* 내부 요소가 둥근 모서리를 벗어나지 않도록 */
}

.tag-input-container:focus-within {
  outline: none;
  border-color: var(--global-accent-color, #5865f2); /* ▼▼▼ 수정 ▼▼▼ */
  box-shadow: 0 0 0 2px var(--global-accent-color, #5865f2)33; /* ▼▼▼ 수정 ▼▼▼ */
}

.tag-input-container input {
  border: none !important;
  background: none !important;
  flex-grow: 1;
  padding: 0.75rem !important;
  margin: 0 !important; /* 다른 input 스타일 재정의 */
  box-shadow: none !important; /* 포커스 효과 중복 방지 */
}

.tag-input-container input:focus {
  outline: none;
  box-shadow: none !important;
}

.tag-input-container button {
  flex-shrink: 0;
  padding: 0 1rem;
  cursor: pointer;
  background: none;
  border: none;
  border-left: 1px solid var(--border-color);
  color: var(--text-muted);
  font-size: 1.2rem;
  font-weight: 300;
}

.tags-list {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-top: 1rem;
}

.tag-item {
  display: flex;
  align-items: center;
  gap: 0.4rem;
  background-color: var(--input-bg, #f0f2f5);
  color: var(--text-color);
  padding: 0.3rem 0.7rem;
  border-radius: 6px;
  font-size: 0.85rem;
  border: 1px solid var(--border-color);
}

.tag-item button {
  background: none;
  border: none;
  color: var(--text-muted);
  font-size: 1.1rem;
  cursor: pointer;
  padding: 0;
  line-height: 1;
  opacity: 0.7;
  transition: opacity 0.2s;
}
.tag-item button:hover {
  opacity: 1;
}

/* PairSettingsModal의 오래된 스타일 클래스 제거 (필요 시) */
.pair-settings-form .form-group {
  /* 이 클래스는 더 이상 사용되지 않으므로 관련 스타일이 있다면 제거해도 좋습니다. */
}

/* --- 20. 전역 스크롤바 스타일 (수정 완료) --- */

/* Firefox 브라우저 */
* {
  scrollbar-width: thin; /* 스크롤바를 얇게 설정 */
  scrollbar-color: var(--global-accent-color, #c1c1c1) transparent; /* 막대 색상과 트랙 색상 */
}

/* WebKit 기반 브라우저 (Chrome, Safari, Edge 등) */
*::-webkit-scrollbar {
  width: 6px; /* 세로 스크롤바 너비 */
  height: 6px; /* 가로 스크롤바 높이 */
}

*::-webkit-scrollbar-track {
  background-color: transparent; /* 트랙(배경)은 투명하게 처리 */
}

*::-webkit-scrollbar-thumb {
  background-color: var(--global-accent-color, #c1c1c1); /* 스크롤바 막대의 기본 색상 */
  border-radius: 10px; /* 막대를 둥글게 만듦 */
}
/* ▲▲▲ 이 섹션으로 교체 ▲▲▲ */

/* --- 21. 링크 미리보기 카드 스타일 (신규 추가) --- */
.link-preview-card {
  display: block;
  max-width: var(--media-max-width, 400px);
  background-color: var(--sidebar-bg, #ffffff);
  border: 1px solid var(--border-color, #e9ecef);
  border-radius: 12px;
  overflow: hidden;
  text-decoration: none;
  color: var(--text-color);
  transition: background-color 0.2s;
}

.link-preview-card:hover {
  background-color: var(--input-bg, #f0f2f5);
}

.link-preview-image {
  width: 100%;
  height: 180px;
  object-fit: cover;
  border-bottom: 1px solid var(--border-color, #e9ecef);
}

.link-preview-content {
  padding: 0.8rem 1rem;
}

.link-preview-title {
  font-size: 0.95rem;
  font-weight: 600;
  margin-bottom: 0.4rem;
  /* 두 줄 이상은 말줄임표로 처리 */
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}

.link-preview-description {
  font-size: 0.85rem;
  color: var(--text-muted);
  /* 세 줄 이상은 말줄임표로 처리 */
  display: -webkit-box;
  -webkit-line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  line-height: 1.5;
}

.link-preview-service {
  font-size: 0.75rem;
  color: var(--text-muted);
  margin-top: 0.6rem;
  text-transform: capitalize; /* 첫 글자 대문자로 */
}

/* 링크 카드가 포함된 말풍선 스타일 조정 */
.message-bubble.media .link-preview-card {
  border: none; /* 말풍선 안에서는 테두리 제거 */
}

/* --- 22. 주석 (Comment) 스타일 (신규 추가) --- */

/* 하이라이트 스타일 */
.comment-highlight {
  background: linear-gradient(to top, rgba(255, 230, 0, 0.5) 40%, transparent 40%);
  padding-bottom: 1px; /* 약간의 공간 확보 */
  cursor: help; /* 마우스 커서를 도움말로 변경 */
  position: relative; /* 툴팁 위치의 기준점 */
}

/* 툴팁 기본 스타일 */
.comment-highlight::after {
  content: attr(data-comment); /* data-comment 속성 값을 내용으로 사용 */
  position: absolute;
  bottom: 100%; /* 텍스트 바로 위에 위치 */
  left: 50%;
  transform: translateX(-50%);
  margin-bottom: 8px; /* 텍스트와의 간격 */
  
  /* 모양 */
  background-color: #333;
  color: #fff;
  padding: 0.5rem 0.8rem;
  border-radius: 6px;
  font-size: 0.8rem;
  white-space: pre-wrap; /* 줄바꿈 유지 */
  min-width: 150px;
  max-width: 300px;
  text-align: left;
  
  /* 숨김 및 애니메이션 */
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
  transition: opacity 0.2s ease-in-out, visibility 0.2s ease-in-out;
  z-index: 10;
}

/* 툴팁 꼬리표 */
.comment-highlight::before {
  content: '';
  position: absolute;
  bottom: 100%;
  left: 50%;
  transform: translateX(-50%);
  margin-bottom: 2px; /* 툴팁 본체와 꼬리표 사이 간격 */

  border: 6px solid transparent;
  border-top-color: #333;

  /* 숨김 및 애니메이션 */
  opacity: 0;
  visibility: hidden;
  pointer-events: none;
  transition: opacity 0.2s ease-in-out, visibility 0.2s ease-in-out;
  z-index: 10;
}


/* hover 시 툴팁 보이기 */
.comment-highlight:hover::after,
.comment-highlight:hover::before {
  opacity: 1;
  visibility: visible;
}

/* --- 23. 스티커 FX 관련 스타일 (수정 완료) --- */

/* FX 핸들 아이콘 */
.sticker-handle.fx-handle {
  bottom: -12px;
  left: -12px;
  cursor: pointer;
  background-color: #9b59b6;
}

/* ▼▼▼ [핵심 수정] 복원된 렌더링 구조에 맞춘 CSS ▼▼▼ */
.sticker-wrapper {
  /* CSS 변수 선언 */
  --sticker-shadow: none;
  --gradient-overlay: none;
  --border-color: transparent;
  --border-width: 0px;
  --border-radius: 0px;
  --sticker-mask-image: none;

  /* 그림자 효과 적용 */
  filter: drop-shadow(var(--sticker-shadow));
}

/* 테두리를 그리기 위한 외부 컨테이너 (이미지 스티커 전용) */
.sticker-border-container {
  width: 100%;
  height: 100%;
  padding: var(--border-width);
  background-color: var(--border-color);
  border-radius: var(--border-radius);
  
  /* 이미지 스티커에만 마스크 적용 */
  mask-image: var(--sticker-mask-image);
  mask-size: 100% 100%;
  -webkit-mask-image: var(--sticker-mask-image);
  -webkit-mask-size: 100% 100%;
}

/* 실제 이미지와 그라데이션을 담는 내부 컨테이너 */
.sticker-image-container {
  position: relative;
  width: 100%;
  height: 100%;
  background-color: transparent; /* 투명 배경 */
  border-radius: calc(var(--border-radius) - var(--border-width));
  overflow: hidden;
}

/* 그라데이션 오버레이 */
.sticker-image-container::after {
  content: '';
  position: absolute;
  inset: 0;
  background: var(--gradient-overlay, none);
  pointer-events: none;
  
  /* 그라데이션도 이미지 모양에 맞게 잘라냄 */
  mask-image: var(--sticker-mask-image);
  mask-size: contain;
  mask-repeat: no-repeat;
  mask-position: center;
  -webkit-mask-image: var(--sticker-mask-image);
  -webkit-mask-size: contain;
  -webkit-mask-repeat: no-repeat;
  -webkit-mask-position: center;
}

/* 실제 이미지 */
.sticker-image {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: contain;
}
/* ▲▲▲ */


/* FX 모달 내부 UI */
.fx-modal-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1.5rem;
}
.fx-group .card-label.fx-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid var(--border-color);
  padding-bottom: 0.75rem;
  margin-bottom: 1rem;
}
.fx-controls {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}
.fx-control {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 0.85rem;
}
.fx-control.slider {
  gap: 0.75rem;
}
.fx-control.slider input[type="range"] {
  flex-grow: 1;
}
.fx-control.slider span:last-child {
  font-family: monospace;
  min-width: 40px;
  text-align: right;
}
.fx-controls select {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background-color: #fff;
}


/* 토글 스위치 스타일 */
.toggle-switch {
  position: relative;
  width: 40px;
  height: 22px;
  -webkit-appearance: none;
  appearance: none;
  background-color: #e9ecef;
  border-radius: 99px;
  cursor: pointer;
  transition: background-color 0.2s;
}
.toggle-switch::before {
  content: '';
  position: absolute;
  top: 3px;
  left: 3px;
  width: 16px;
  height: 16px;
  background-color: white;
  border-radius: 50%;
  transition: transform 0.2s;
}
.toggle-switch:checked {
  background-color: var(--global-accent-color, #5865f2);
}
.toggle-switch:checked::before {
  transform: translateX(18px);
}

/* 스티커 애니메이션 */
@keyframes bounce {
  0%, 20%, 50%, 80%, 100% {
    transform: translateY(0);
  }
  40% {
    transform: translateY(-15px);
  }
  60% {
    transform: translateY(-7px);
  }
}

@keyframes float {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-8px);
  }
  100% {
    transform: translateY(0px);
  }
}
/* --- 24. 드래그 가능한 모달 스타일 (신규 추가) --- */

/* 드래그 핸들(모달 헤더)에 마우스 커서 변경 */
.modal-header.is-draggable {
  cursor: move;
  user-select: none; /* 헤더 텍스트가 드래그 중 선택되지 않도록 */
}

/* 모달이 드래그되는 동안 body의 텍스트 선택을 방지 */
body.is-dragging {
  user-select: none;
}

/* --- 24. 드래그 가능한 모달 스타일 (신규 추가) --- */

/* 드래그 핸들(모달 헤더)에 마우스 커서 변경 */
.modal-header.is-draggable {
  cursor: move;
  user-select: none; /* 헤더 텍스트가 드래그 중 선택되지 않도록 */
}

/* 모달이 드래그되는 동안 body의 텍스트 선택을 방지 */
body.is-dragging {
  user-select: none;
}


/* ▼▼▼ [핵심] 커스텀 슬라이더 스타일 섹션 추가 ▼▼▼ */

/* --- 25. 커스텀 폼 컨트롤 스타일 (신규 추가) --- */

input[type="range"] {
  /* 기본 스타일 제거 */
  -webkit-appearance: none;
  appearance: none;
  background: transparent;
  cursor: pointer;
  width: 100%; /* 부모 요소 너비에 맞춤 */
}

/* --- WebKit (Chrome, Safari, Edge) --- */
input[type="range"]::-webkit-slider-runnable-track {
  height: 4px;
  border-radius: 2px;
  /* 슬라이더 진행률에 따라 색상이 변하는 그라데이션 배경 */
  background: linear-gradient(
    to right, 
    var(--global-accent-color, #5865f2) var(--slider-progress, 0%), 
    #e9ecef var(--slider-progress, 0%)
  );
}

input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none; /* 기본 핸들 모양 제거 */
  appearance: none;
  margin-top: -6px; /* 트랙 중앙에 오도록 위치 조정 (thumb height / 2 - track height / 2) * -1 */
  background-color: var(--global-accent-color, #5865f2);
  height: 16px;
  width: 16px;
  border-radius: 50%;
  border: 2px solid #fff;
  box-shadow: 0 1px 3px rgba(0,0,0,0.2);
  transition: transform 0.1s ease-in-out;
}

input[type="range"]:active::-webkit-slider-thumb {
  transform: scale(1.1); /* 클릭 시 살짝 커지는 효과 */
}

/* --- Firefox --- */
input[type="range"]::-moz-range-track {
  height: 4px;
  border-radius: 2px;
  background: #e9ecef; /* Firefox는 그라데이션 트랙을 직접 지원하지 않으므로 단색으로 처리 */
}

input[type="range"]::-moz-range-progress {
  height: 4px;
  border-radius: 2px;
  background-color: var(--global-accent-color, #5865f2);
}

input[type="range"]::-moz-range-thumb {
  background-color: var(--global-accent-color, #5865f2);
  height: 16px;
  width: 16px;
  border-radius: 50%;
  border: 2px solid #fff;
  box-shadow: 0 1px 3px rgba(0,0,0,0.2);
  transition: transform 0.1s ease-in-out;
}

input[type="range"]:active::-moz-range-thumb {
  transform: scale(1.1);
}

/* --- 26. 텍스트 스티커 모달 스타일 (신규 추가) --- */

.text-sticker-modal-content .form-card {
  padding: 1rem;
}

.text-sticker-preview {
  width: 100%;
  min-height: 150px;
  border-radius: var(--border-radius);
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 1rem;
  border: 1px dashed var(--border-color);
  background-color: #f0f2f5;
  text-align: center;
  overflow: hidden;
}

.text-sticker-preview span {
  max-width: 100%;
  word-break: break-word;
}

.text-sticker-modal-content textarea {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  background-color: #fff;
  resize: vertical;
}

.text-sticker-controls-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
}

/* ▼▼▼ [수정] 폼 카드 내부를 flexbox로 만들어 컨트롤 간 간격 자동 조절 ▼▼▼ */
.text-sticker-controls-grid .form-card {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.text-sticker-controls-grid select {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background-color: #fff;
}

.sticker-color-controls {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
  align-items: center;
  text-align: center;
}

.sticker-color-controls div {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.8rem;
}

.sticker-color-controls input[type="color"] {
  width: 40px;
  height: 40px;
  border: 1px solid var(--border-color);
  padding: 2px;
  border-radius: 5px;
  background: none;
  cursor: pointer;
}
.sticker-color-controls input[type="color"]:disabled {
  opacity: 0.3;
  cursor: not-allowed;
}

/* ▼▼▼ [수정] 색상 패널의 슬라이더에 라벨 추가를 위해 스타일 조정 ▼▼▼ */
.text-sticker-controls-grid .form-card .slider-container {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}
.text-sticker-controls-grid .form-card .slider-container span:first-of-type {
  font-size: 0.85rem;
}
.text-sticker-controls-grid .form-card .slider-container span:last-of-type {
  font-family: monospace;
  min-width: 50px;
  text-align: right;
}


.transparent-toggle {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.9rem;
}

/* Workspace 헤더 아이콘 변경 대응 */
.workspace-header .theme-edit-btn i.fa-sticky-note {
  /* 기존 아이콘은 이제 사용되지 않으므로, 필요 시 이 스타일은 제거해도 됩니다. */
}

/* ▼▼▼ [신규] 메시지 입력창 버전 선택 UI 스타일 ▼▼▼ */
.add-message-form .sender-selector-group {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
  flex-shrink: 0;
}
.add-message-form .sender-selector-group select {
  border: 1px solid var(--border-color);
  background-color: var(--input-bg);
  border-radius: 8px;
  padding: 0.3rem 0.6rem;
  transition: border-color 0.2s, box-shadow 0.2s;
  font-size: 0.85rem;
}
.add-message-form .sender-selector-group select.version-selector {
  max-width: 120px; /* 버전 이름이 너무 길 경우를 대비 */
}
.add-message-form .sender-selector-group select:focus {
  outline: none;
  border-color: var(--global-accent-color, #5865f2);
  box-shadow: 0 0 0 2px var(--global-accent-color, #5865f2)33;
}

/* 기존 메시지 입력창 레이아웃 조정 */
.add-message-form {
  align-items: flex-start; /* 컨트롤 높이가 달라지므로 상단 정렬 */
}
.add-message-form .editor-container, 
.add-message-form .attach-file-btn,
.add-message-form button[type="submit"] {
  margin-top: auto; /* 키 큰 요소(sender-selector-group)의 아래쪽에 정렬되도록 */
}

/* --- RichTextEditModal 버전 선택 UI 스타일 --- */
.rich-text-edit-container .form-group-row {
  display: flex;
  gap: 1rem;
  margin-bottom: 1rem;
}
.rich-text-edit-container .form-group {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}
.rich-text-edit-container .form-group label {
  font-size: 0.85rem;
  font-weight: 500;
}
.rich-text-edit-container .form-group select {
  width: 100%;
  padding: 0.5rem;
  border: 1px solid var(--border-color);
  border-radius: 6px;
  background-color: #fff;
}

/* --- 27. 데이터 불러오기 모달 스타일 (신규 추가) --- */

.data-import-modal .utility-panel {
  gap: 0; /* 내부 카드 간격은 카드가 알아서 처리 */
}

.import-source-tabs {
  display: flex;
  border-bottom: 1px solid var(--border-color);
  margin-bottom: 1.5rem;
}

.import-source-tabs button {
  flex: 1;
  padding: 0.8rem 1rem;
  border: none;
  background: none;
  cursor: pointer;
  font-size: 0.9rem; /* ▼▼▼ [수정] 폰트 크기 살짝 줄임 ▼▼▼ */
  color: var(--text-muted);
  border-bottom: 3px solid transparent;
  margin-bottom: -1px; /* 부모 border와 겹치게 */
  transition: color 0.2s, border-color 0.2s;
  white-space: nowrap; /* ▼▼▼ [추가] 줄바꿈 방지 ▼▼▼ */
}

.import-source-tabs button:hover {
  color: var(--text-color);
}

.import-source-tabs button.active {
  color: var(--global-accent-color, #5865f2);
  border-bottom-color: var(--global-accent-color, #5865f2);
  font-weight: 500;
}

.import-content.form-card {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  background-color: transparent;
  border: none;
  padding: 0;
}

.import-instruction {
  font-size: 0.85rem;
  color: var(--text-muted);
  background-color: #f8f9fa;
  padding: 0.8rem 1rem;
  border-radius: 8px;
  line-height: 1.6;
  margin: 0;
}

.import-status {
  margin-top: 1rem;
  text-align: center;
  padding: 0.75rem;
  border-radius: 8px;
  font-weight: 500;
}

.import-status.error {
  background-color: #fff5f5;
  color: #c53030;
  border: 1px solid #fed7d7;
}

.workspace-header .fa-file-import {
  /* 아이콘 스타일은 .theme-edit-btn 클래스가 처리하므로 별도 스타일 불필요 */
}

/* --- 28. 트위터 화자 할당 모달 스타일 (신규 추가) --- */

.utility-panel select {
  width: 100%;
  padding: 0.75rem;
  background-color: #fff;
  border: 1px solid var(--border-color);
  border-radius: 8px;
  font-size: 0.9rem;
  color: #212529;
}

.utility-panel select:focus {
  outline: none;
  border-color: var(--global-accent-color, #5865f2);
  box-shadow: 0 0 0 2px var(--global-accent-color, #5865f2)33;
}


// ======================================================
// File: src\App.js
// ======================================================

// File: src/App.js

import React, { useState, useEffect, useCallback } from 'react';
import Dashboard from './components/Dashboard';
import Workspace from './components/Workspace';
import AddPairModal from './components/AddPairModal';
import SettingsModal from './components/SettingsModal';
import SettingsPanel from './components/SettingsPanel';
import ConversationSettingsModal from './components/ConversationSettingsModal';
import TitleBar from './components/TitleBar';
import ContextMenu from './components/ContextMenu';
import PairSettingsModal from './components/PairSettingsModal';
import ThemeSelectionModal from './components/ThemeSelectionModal';
import ColorThief from 'colorthief';
import { generateThemesFromPalette } from './themeUtils';
import { parseLink } from './linkUtils';
import './App.css';
import { db } from './db';

const WEB_FONTS = [ { name: '페이퍼로지', value: "'Paperozi', sans-serif" }, { name: 'Noto Sans KR', value: "'Noto Sans KR', sans-serif" }, { name: 'Source Code Pro', value: "'Source Code Pro', monospace" }, { name: '프리젠테이션', value: "'Presentation', sans-serif" }, { name: '시스템 기본', value: "sans-serif" }, ];

const DEFAULT_GLOBAL_THEME = {
  titleBarBg: '#FFFFFF', 
  dashboardBg: '#F0F2F5',
};

const DEFAULT_WORKSPACE_THEME = {
  name: 'Clean Light',
  appBg: '#F0F2F5',
  headerTitleColor: '#212529',
  borderColor: '#E9ECEF',
  sidebarBg: '#FFFFFF',
  headerBg: '#FFFFFF',
  footerBg: '#FFFFFF',
  chatBg: '#FFFFFF',
  sidebarInputBg: '#F0F2F5',
  inputBg: '#F0F2F5',
  buttonBg: '#5865F2',
  bubbleMeBg: '#5865F2',
  nameMeColor: '#5865F2',
  bubbleOtherBg: '#E9ECEF',
  textColor: '#212529',
  nameOtherColor: '#868E96',
  mediaMaxWidth: 400,
};

const createDefaultCharacterVersion = (name, username) => ({
  id: `v_${Date.now()}_${Math.random()}`,
  name: name || '기본 버전',
  username: username || '',
  avatar: null,
  profileBanner: null,
  headerColor1: '#232428',
  headerColor2: '#232428',
  statusMessage: '',
  memo: '',
  tags: [],
});

const DEFAULT_CHARACTERS = { 
  me: [createDefaultCharacterVersion('A 캐릭터', 'user_a')], 
  other: [createDefaultCharacterVersion('B 캐릭터', 'user_b')] 
};

const getInitialState = (key, defaultValue) => {
  try {
    const savedItem = localStorage.getItem(key);
    if (savedItem === null) return defaultValue;
    const parsedItem = JSON.parse(savedItem);
    if (typeof defaultValue === 'object' && defaultValue !== null && !Array.isArray(defaultValue) &&
        typeof parsedItem === 'object' && parsedItem !== null && !Array.isArray(parsedItem)) {
      return { ...defaultValue, ...parsedItem };
    }
    return parsedItem;
  } catch (error) {
    console.error(`Error reading or parsing localStorage key “${key}”:`, error);
    return defaultValue;
  }
};

function App() {
  const [characterPairs, setCharacterPairs] = useState(() => getInitialState('pair-chat-data', []));
  const [currentView, setCurrentView] = useState('dashboard');
  const [selectedPairId, setSelectedPairId] = useState(null);
  const [isAddPairModalOpen, setIsAddPairModalOpen] = useState(false);
  const [isSettingsModalOpen, setIsSettingsModalOpen] = useState(false);
  const [globalTheme, setGlobalTheme] = useState(() => getInitialState('chat-app-global-theme', DEFAULT_GLOBAL_THEME));
  const [selectedFont, setSelectedFont] = useState(() => getInitialState('chat-backup-font', WEB_FONTS[0].value));
  const [availableFonts, setAvailableFonts] = useState({ web: WEB_FONTS, system: [] });
  const [editingConvo, setEditingConvo] = useState(null);
  const [fontSize, setFontSize] = useState(() => getInitialState('chat-backup-font-size', 15));
  const [letterSpacing, setLetterSpacing] = useState(() => getInitialState('chat-backup-letter-spacing', 0));
  const [dashboardContextMenu, setDashboardContextMenu] = useState({ isOpen: false, position: { x: 0, y: 0 }, pairId: null });
  const [editingPair, setEditingPair] = useState(null);
  const [newPairDataBuffer, setNewPairDataBuffer] = useState(null);
  const [themeOptionsForNewPair, setThemeOptionsForNewPair] = useState([]);
  const [isThemeSelectorOpen, setIsThemeSelectorOpen] = useState(false);

  useEffect(() => { if(Array.isArray(characterPairs)) { localStorage.setItem('pair-chat-data', JSON.stringify(characterPairs)); } }, [characterPairs]);
  useEffect(() => { localStorage.setItem('chat-app-global-theme', JSON.stringify(globalTheme)); }, [globalTheme]);
  useEffect(() => {
    localStorage.setItem('chat-backup-font', JSON.stringify(selectedFont));
    document.documentElement.style.setProperty('--global-font-family', selectedFont);
  }, [selectedFont]);
  useEffect(() => { localStorage.setItem('chat-backup-font-size', fontSize); document.documentElement.style.setProperty('--global-font-size', `${fontSize}px`); }, [fontSize]);
  useEffect(() => { localStorage.setItem('chat-backup-letter-spacing', letterSpacing); document.documentElement.style.setProperty('--global-letter-spacing', `${letterSpacing}px`); }, [letterSpacing]);
  useEffect(() => { document.documentElement.style.setProperty('--global-accent-color', globalTheme.titleBarBg || '#FFFFFF'); }, [globalTheme.titleBarBg]);
  useEffect(() => {
    const loadSystemFonts = async () => {
      if (window.electronAPI && typeof window.electronAPI.getSystemFonts === 'function') {
        try {
          const systemFonts = await window.electronAPI.getSystemFonts();
          setAvailableFonts(prev => ({ ...prev, system: systemFonts }));
        } catch (error) {
          console.error('Failed to load system fonts:', error);
        }
      }
    };
    loadSystemFonts();
  }, []);

  const handleThemeSelectedForNewPair = useCallback((selectedTheme) => {
    if (!newPairDataBuffer) return;
    const newPair = {
      ...newPairDataBuffer,
      id: `pair_${Date.now()}`,
      conversations: [],
      slideImages: [],
      characters: { ...DEFAULT_CHARACTERS },
      tags: [],
      theme: { ...DEFAULT_WORKSPACE_THEME, ...selectedTheme },
    };
    setCharacterPairs(pairs => [...(Array.isArray(pairs) ? pairs : []), newPair]);
    setIsThemeSelectorOpen(false);
    setThemeOptionsForNewPair([]);
    setNewPairDataBuffer(null);
  }, [newPairDataBuffer]);

  const handleCreatePairRequest = useCallback((pairData) => {
    if (!pairData.backgroundImage) {
      const newPair = { ...pairData, id: `pair_${Date.now()}`, conversations: [], slideImages: [], characters: { ...DEFAULT_CHARACTERS }, tags: [], theme: { ...DEFAULT_WORKSPACE_THEME } };
      setCharacterPairs(pairs => [...(Array.isArray(pairs) ? pairs : []), newPair]);
    } else {
      setNewPairDataBuffer(pairData);
      const img = new Image();
      img.src = pairData.backgroundImage;
      img.onload = () => {
        try {
          const colorThief = new ColorThief();
          const palette = colorThief.getPalette(img, 8);
          const themes = generateThemesFromPalette(palette);
          setThemeOptionsForNewPair(themes);
          setIsThemeSelectorOpen(true);
        } catch (e) { console.error("Theme generation failed", e); handleThemeSelectedForNewPair(DEFAULT_WORKSPACE_THEME); }
      };
      img.onerror = () => { console.error("Image loading failed for theme generation."); handleThemeSelectedForNewPair(DEFAULT_WORKSPACE_THEME); }
    }
  }, [handleThemeSelectedForNewPair]);

  const handleAddMessage = useCallback(async (convoId, messageData) => {
    let newMessage;
    const { characterVersionId } = messageData;

    if (messageData.type === 'file') {
      const { file, sender } = messageData;
      try {
        const imageId = await db.images.add({ data: file });
        const fileType = file.type.startsWith('image/') ? 'image' : 'video';
        newMessage = { id: Date.now(), sender, type: fileType, content: imageId, characterVersionId };
      } catch (error) { console.error("미디어 파일 저장 실패:", error); alert("미디어 파일을 저장하는 데 실패했습니다."); return; }
    } else {
      const { text, sender } = messageData;
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = text;
      const plainText = (tempDiv.textContent || tempDiv.innerText || "").trim();
      const parsedData = parseLink(plainText);
      
      if (parsedData && parsedData.type === 'link') {
        try {
          const metadata = await window.electronAPI.fetchLinkMetadata(parsedData.content.url);
          if (metadata && metadata.success) {
            newMessage = { id: Date.now(), sender, type: 'link', content: { ...parsedData.content, ...metadata }, characterVersionId };
          } else {
            newMessage = { id: Date.now(), sender, type: 'text', content: text, characterVersionId };
          }
        } catch (error) {
          newMessage = { id: Date.now(), sender, type: 'text', content: text, characterVersionId };
        }
      } else if (parsedData && parsedData.type === 'embed') {
        newMessage = { id: Date.now(), sender, ...parsedData, characterVersionId };
      } else {
        newMessage = { id: Date.now(), sender, type: 'text', content: text, characterVersionId };
      }
    }

    if (!newMessage) return; 

    setCharacterPairs(pairs => pairs.map(pair => {
      if (pair.id !== selectedPairId) return pair;
      return { ...pair, conversations: (pair.conversations || []).map(convo => {
          if (convo.id !== convoId) return convo;
          const migratedMessages = (convo.messages || []).map(msg => {
            if (msg.text && !msg.type) { return { ...msg, type: 'text', content: msg.text }; }
            return msg;
          });
          return { ...convo, messages: [...migratedMessages, newMessage] };
        })
      };
    }));
  }, [selectedPairId]);

  const handleImportMessages = useCallback((convoId, newMessages) => {
    setCharacterPairs(pairs => pairs.map(pair => {
      if (pair.id !== selectedPairId) return pair;
      return {
        ...pair,
        conversations: (pair.conversations || []).map(convo => {
          if (convo.id !== convoId) return convo;
          const existingMessages = convo.messages || [];
          const messagesWithIds = newMessages.map((msg, index) => ({
            ...msg,
            id: Date.now() + index,
          }));
          return { ...convo, messages: [...existingMessages, ...messagesWithIds] };
        })
      };
    }));
  }, [selectedPairId]);

  const handleToggleBookmark = useCallback((convoId, messageId) => {
    setCharacterPairs(pairs => pairs.map(pair => {
      if (pair.id !== selectedPairId) return pair;
      return {
        ...pair,
        conversations: pair.conversations.map(convo => {
          if (convo.id !== convoId) return convo;
          return {
            ...convo,
            messages: convo.messages.map(msg => 
              msg.id === messageId ? { ...msg, bookmarked: !msg.bookmarked } : msg
            )
          };
        })
      };
    }));
  }, [selectedPairId]);

  const handleDashboardContextMenu = (e, pairId) => { e.preventDefault(); setDashboardContextMenu({ isOpen: true, position: { x: e.clientX, y: e.clientY }, pairId }); };
  const closeDashboardContextMenu = () => setDashboardContextMenu({ ...dashboardContextMenu, isOpen: false });
  const handleDeletePair = useCallback((pairIdToDelete) => { if (window.confirm("정말로 이 대화 로그 전체를 삭제하시겠습니까? 모든 내용이 영구적으로 사라집니다.")) { setCharacterPairs(pairs => pairs.filter(p => p.id !== pairIdToDelete)); } }, []);
  const handleOpenPairSettingsModal = useCallback((pairId) => { const pairToEdit = characterPairs.find(p => p.id === pairId); if (pairToEdit) { setEditingPair(pairToEdit); } }, [characterPairs]);
  const handleUpdateGlobalTheme = useCallback((newTheme) => setGlobalTheme(newTheme), []);
  const handleUpdatePairTheme = useCallback((pairId, newTheme) => { setCharacterPairs(pairs => pairs.map(p => p.id === pairId ? { ...p, theme: newTheme } : p)); }, []);
  const handleSelectPair = useCallback((pairId) => { setSelectedPairId(pairId); setCurrentView('workspace'); }, []);
  const handleGoToDashboard = useCallback(() => { setSelectedPairId(null); setCurrentView('dashboard'); }, []);
  const handleUpdatePairDetails = useCallback((pairId, updatedDetails) => { setCharacterPairs(pairs => pairs.map(p => p.id === pairId ? { ...p, title: updatedDetails.title, tags: updatedDetails.tags } : p)); }, []);
  const handleAddConversation = useCallback((pairId, convoData) => { const newConversation = { id: `convo_${Date.now()}`, title: convoData.title, tags: convoData.tags || [], messages: [], stickers: [] }; setCharacterPairs(pairs => pairs.map(p => { if (p.id === pairId) { const conversations = p.conversations || []; return { ...p, conversations: [...conversations, newConversation] }; } return p; })); }, []);
  const handleUpdateBackgroundImage = useCallback((pairId, newImageUrl) => { setCharacterPairs(pairs => pairs.map(p => p.id === pairId ? { ...p, backgroundImage: newImageUrl } : p)); }, []);
  const handleAddSlideImage = useCallback((pairId, newImageId) => { setCharacterPairs(pairs => pairs.map(p => { if (p.id === pairId) { const existingImages = p.slideImages || []; return { ...p, slideImages: [...existingImages, newImageId] }; } return p; })); }, []);
  const handleDeleteSlideImage = useCallback(async (pairId, imageIdToDelete) => { setCharacterPairs(pairs => pairs.map(p => { if (p.id === pairId) { const updatedImages = (p.slideImages || []).filter(id => id !== imageIdToDelete); return { ...p, slideImages: updatedImages }; } return p; })); try { await db.images.delete(imageIdToDelete); } catch (error) { console.error("IndexedDB에서 이미지 삭제 실패:", error); } }, []);
  const handleUpdateCharacters = useCallback((pairId, newCharacterData) => { setCharacterPairs(pairs => pairs.map(p => p.id === pairId ? { ...p, characters: newCharacterData } : p)); }, []);
  const handleOpenConvoSettingsModal = useCallback((convoId) => { const pair = (Array.isArray(characterPairs) ? characterPairs : []).find(p => p.id === selectedPairId); const convo = (pair?.conversations || []).find(c => c.id === convoId); if (convo) setEditingConvo(convo); }, [characterPairs, selectedPairId]);
  const handleUpdateConversation = useCallback((convoId, updatedData) => { setCharacterPairs(pairs => pairs.map(p => { if (p.id !== selectedPairId) return p; const updatedConversations = (p.conversations || []).map(c => c.id !== convoId ? c : { ...c, ...updatedData }); return { ...p, conversations: updatedConversations }; })); setEditingConvo(null); }, [selectedPairId]);
  const handleDeleteConversation = useCallback((convoId) => { setCharacterPairs(pairs => pairs.map(p => { if (p.id !== selectedPairId) return p; const updatedConversations = (p.conversations || []).filter(c => c.id !== convoId); return { ...p, conversations: updatedConversations }; })); }, [selectedPairId]);
  
  const handleEditMessage = useCallback((convoId, messageId, updatedData) => {
    setCharacterPairs(pairs => pairs.map(pair => {
      if (pair.id !== selectedPairId) return pair;
      return {
        ...pair,
        conversations: pair.conversations.map(convo => {
          if (convo.id !== convoId) return convo;
          return {
            ...convo,
            messages: convo.messages.map(msg => 
              msg.id === messageId ? { ...msg, ...updatedData } : msg
            )
          };
        })
      };
    }));
  }, [selectedPairId]);
  
  const handleAddMessageInBetween = useCallback((convoId, targetMessageId, messageData, position) => {
    const newMessage = {
      id: Date.now(),
      type: 'text',
      content: messageData.text,
      sender: messageData.sender,
      characterVersionId: messageData.characterVersionId,
    };
    setCharacterPairs(pairs => pairs.map(pair => {
      if (pair.id !== selectedPairId) return pair;
      return {
        ...pair,
        conversations: pair.conversations.map(convo => {
          if (convo.id !== convoId) return convo;
          const targetIndex = convo.messages.findIndex(msg => msg.id === targetMessageId);
          if (targetIndex === -1) return convo;
          const newMessages = [...convo.messages];
          const insertIndex = position === 'before' ? targetIndex : targetIndex + 1;
          newMessages.splice(insertIndex, 0, newMessage);
          return { ...convo, messages: newMessages };
        })
      };
    }));
  }, [selectedPairId]);
  const handleDeleteMessage = useCallback((convoId, messageId) => { setCharacterPairs(pairs => pairs.map(pair => { if (pair.id !== selectedPairId) return pair; return { ...pair, conversations: pair.conversations.map(convo => { if (convo.id !== convoId) return convo; return { ...convo, messages: convo.messages.filter(msg => msg.id !== messageId) }; }) }; })); }, [selectedPairId]);
  const handleUpdateStickers = useCallback((convoId, newStickers) => { setCharacterPairs(pairs => pairs.map(pair => { if (pair.id !== selectedPairId) return pair; return { ...pair, conversations: pair.conversations.map(convo => { if (convo.id !== convoId) return convo; return { ...convo, stickers: newStickers }; }) }; })); }, [selectedPairId]);
  
  const selectedPair = (Array.isArray(characterPairs) ? characterPairs : []).find(p => p.id === selectedPairId);
  const dashboardMenuItems = [ { label: '정보 수정', action: () => handleOpenPairSettingsModal(dashboardContextMenu.pairId) }, { isSeparator: true }, { label: '삭제', className: 'delete', action: () => handleDeletePair(dashboardContextMenu.pairId) }, ];

  return (
    <>
      <TitleBar bgColor={globalTheme.titleBarBg} onOpenSettings={() => setIsSettingsModalOpen(true)} />
      <div className="app-container-root" style={{ paddingTop: '32px' }}>
        {currentView === 'dashboard' ? (
          <Dashboard logs={Array.isArray(characterPairs) ? characterPairs : []} onSelectLog={handleSelectPair} onOpenAddLogModal={() => setIsAddPairModalOpen(true)} bgColor={globalTheme.dashboardBg} onContextMenu={handleDashboardContextMenu} />
        ) : (
          selectedPair && (
            // ▼▼▼ [핵심 확인] Workspace 컴포넌트에 onImportMessages prop이 정확히 전달되고 있는지 확인하세요. ▼▼▼
            <Workspace
              pairData={selectedPair} 
              onGoToDashboard={handleGoToDashboard} 
              onAddConversation={handleAddConversation} 
              onAddMessage={handleAddMessage}
              onUpdateBackgroundImage={handleUpdateBackgroundImage} 
              onAddSlideImage={handleAddSlideImage} 
              onDeleteSlideImage={handleDeleteSlideImage}
              onUpdateCharacters={handleUpdateCharacters} 
              onUpdatePairDetails={handleUpdatePairDetails} 
              onEditConversation={handleOpenConvoSettingsModal}
              onDeleteConversation={handleDeleteConversation} 
              onUpdateTheme={handleUpdatePairTheme} 
              onEditMessage={handleEditMessage}
              onAddMessageInBetween={handleAddMessageInBetween} 
              onDeleteMessage={handleDeleteMessage} 
              onUpdateStickers={handleUpdateStickers}
              onToggleBookmark={handleToggleBookmark}
              onImportMessages={handleImportMessages} // <-- 이 줄이 가장 중요합니다!
            />
          )
        )}
        <AddPairModal isOpen={isAddPairModalOpen} onClose={() => setIsAddPairModalOpen(false)} onAddLog={handleCreatePairRequest} />
        <ThemeSelectionModal
          isOpen={isThemeSelectorOpen}
          onClose={() => { if (newPairDataBuffer) { handleThemeSelectedForNewPair(DEFAULT_WORKSPACE_THEME); } setIsThemeSelectorOpen(false); }}
          themes={themeOptionsForNewPair} onSelectTheme={handleThemeSelectedForNewPair}
        />
        <SettingsModal isOpen={isSettingsModalOpen} onClose={() => setIsSettingsModalOpen(false)} title="전역 설정">
          <SettingsPanel 
            availableFonts={availableFonts} selectedFont={selectedFont} onFontChange={(e) => setSelectedFont(e.target.value)} 
            theme={globalTheme} onThemeChange={handleUpdateGlobalTheme} fontSize={fontSize} onFontSizeChange={(e) => setFontSize(parseFloat(e.target.value))}
            letterSpacing={letterSpacing} onLetterSpacingChange={(e) => setLetterSpacing(parseFloat(e.target.value))}
          />
        </SettingsModal>
        <PairSettingsModal 
          isOpen={!!editingPair} onClose={() => setEditingPair(null)} pairData={editingPair} 
          onSave={(updatedDetails) => { handleUpdatePairDetails(editingPair.id, updatedDetails); setEditingPair(null); }}
        />
        <ConversationSettingsModal isOpen={!!editingConvo} onClose={() => setEditingConvo(null)} convoData={editingConvo} onSave={(updatedData) => handleUpdateConversation(editingConvo.id, updatedData)} />
        {dashboardContextMenu.isOpen && ( <ContextMenu position={dashboardContextMenu.position} items={dashboardMenuItems.map(item => ({...item, action: () => { if(item.action) item.action(); closeDashboardContextMenu(); }}))} onClose={closeDashboardContextMenu} /> )}
      </div>
    </>
  );
}

export default App;


// ======================================================
// File: src\App.test.js
// ======================================================

import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


// ======================================================
// File: src\db.js
// ======================================================

// 파일: src/db.js

import Dexie from 'dexie';

// 'chatBackupDB'라는 이름의 데이터베이스를 생성합니다.
export const db = new Dexie('chatBackupDB');

// 데이터베이스 스키마(구조)를 정의합니다.
db.version(1).stores({
  // 'images'라는 테이블(저장소)을 만듭니다.
  // '++id'는 자동으로 증가하는 고유 ID를 의미합니다.
  // 'data'는 이미지 파일(Blob)을 저장할 필드입니다.
  images: '++id, data'
});


// ======================================================
// File: src\index.css
// ======================================================

body {
  margin: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


// ======================================================
// File: src\index.js
// ======================================================

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


// ======================================================
// File: src\linkUtils.js
// ======================================================

// 파일: src/linkUtils.js (전체 코드)

const getYouTubeVideoId = (url) => {
  const regExp = /^(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/|v\/)|youtu\.be\/)([\w-]{11})(?:\S+)?$/;
  const match = url.match(regExp);
  return match ? match[1] : null;
};

const getSpotifyEmbedUrl = (url) => {
  const regExp = /^(?:https?:\/\/)?(?:open\.)?spotify\.com\/(track|album|playlist|artist|episode)\/([a-zA-Z0-9]+)/;
  const match = url.match(regExp);
  if (match && match[1] && match[2]) {
    return `https://open.spotify.com/embed/${match[1]}/${match[2]}`;
  }
  return null;
};

const isTistoryUrl = (url) => {
  const regExp = /^(?:https?:\/\/)?([\w-]+)\.tistory\.com\/(\d+|entry\/.*)/;
  return regExp.test(url);
};

// ▼▼▼ [수정] postype.com과 posty.pe 도메인의 게시물 형태만 인식하도록 정규식 강화 ▼▼▼
const isPostypeUrl = (url) => {
  const regExp = /^(?:https?:\/\/)?(?:www\.)?(?:postype\.com\/@[\w-]+\/post\/|posty\.pe\/)[\w-]+/;
  return regExp.test(url);
};

export const parseLink = (text) => {
  const trimmedText = text.trim();

  // 순서가 중요할 수 있으므로, 더 구체적인 링크부터 확인
  if (isTistoryUrl(trimmedText)) {
    return {
      type: 'link',
      content: { service: 'tistory', url: trimmedText },
      originalText: trimmedText,
    };
  }
  if (isPostypeUrl(trimmedText)) {
    return {
      type: 'link',
      content: { service: 'postype', url: trimmedText },
      originalText: trimmedText,
    };
  }

  const youtubeId = getYouTubeVideoId(trimmedText);
  if (youtubeId) {
    return {
      type: 'embed',
      content: { service: 'youtube', embedUrl: `https://www.youtube.com/embed/${youtubeId}` },
      originalText: trimmedText,
    };
  }

  const spotifyEmbedUrl = getSpotifyEmbedUrl(trimmedText);
  if (spotifyEmbedUrl) {
    return {
      type: 'embed',
      content: { service: 'spotify', embedUrl: spotifyEmbedUrl },
      originalText: trimmedText,
    };
  }

  return null;
};


// ======================================================
// File: src\reportWebVitals.js
// ======================================================

const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


// ======================================================
// File: src\setupTests.js
// ======================================================

// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';


// ======================================================
// File: src\themeUtils.js
// ======================================================

// 파일: src/themeUtils.js (최종 수정본)

// --- 헬퍼 함수들 ---
function rgbToHsl([r, g, b]) {
  r /= 255; g /= 255; b /= 255;
  const max = Math.max(r, g, b), min = Math.min(r, g, b);
  let h = 0, s = 0, l = (max + min) / 2;
  if (max !== min) {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break;
      case g: h = (b - r) / d + 2; break;
      case b: h = (r - g) / d + 4; break;
      default: break;
    }
    h /= 6;
  }
  return [h * 360, s, l];
}

function rgbToHex([r, g, b]) {
  return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1).toUpperCase();
}

function getLuminance(hex) {
    try {
        const rgb = parseInt(hex.slice(1), 16);
        const r = (rgb >> 16) & 0xff, g = (rgb >> 8) & 0xff, b = (rgb >> 0) & 0xff;
        return 0.2126 * r + 0.7152 * g + 0.0722 * b;
    } catch(e) { return 0; }
}

// 두 색상 간의 인지적 거리(contrast)를 계산 (0-100). 높을수록 대비가 큼.
function getColorContrast(color1, color2) {
    const lum1 = getLuminance(color1.hex);
    const lum2 = getLuminance(color2.hex);
    const C = (Math.max(lum1, lum2) + 0.05) / (Math.min(lum1, lum2) + 0.05);
    const deltaL = Math.abs(color1.hsl.l - color2.hsl.l) * 100;
    const deltaS = Math.abs(color1.hsl.s - color2.hsl.s) * 100;
    // 밝기 대비와 채도 대비를 조합하여 최종 점수 계산
    return (C * 5) + deltaL + (deltaS * 0.5); 
}

// --- 최종 테마 생성기 ---
function createTheme(name, bg, allColors) {
    const remaining = allColors.filter(c => c.hex !== bg.hex);
    if (remaining.length < 2) return null;

    // 포인트 색상: 배경과 가장 대비가 크고, 채도가 높은 색
    const accent = [...remaining].sort((a, b) => {
        return getColorContrast(b, bg) * b.hsl.s - getColorContrast(a, bg) * a.hsl.s;
    })[0];

    // 보조 색상: 배경/포인트와 겹치지 않으면서, 배경과 적절한 대비를 이루는 색
    const finalRemaining = remaining.filter(c => c.hex !== accent.hex);
    if (finalRemaining.length === 0) return null;
    const secondary = [...finalRemaining].sort((a, b) => getColorContrast(b, bg) - getColorContrast(a, bg))[0];

    // 가독성 보장
    const isDarkBg = getLuminance(bg.hex) < 128;
    const textColor = isDarkBg ? '#FFFFFF' : '#1D1D1F';
    const mutedTextColor = isDarkBg ? 'rgba(255, 255, 255, 0.65)' : 'rgba(0, 0, 0, 0.55)';
    const inputBg = isDarkBg ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.05)';
    const borderColor = isDarkBg ? 'rgba(255, 255, 255, 0.15)' : 'rgba(0, 0, 0, 0.1)';

    // appBg는 테마가 어두우면 더 어둡게, 밝으면 더 밝게 설정하여 깊이감 부여
    const appBg = isDarkBg ? '#121212' : '#F0F2F5';

    return {
        name,
        // 신규 속성 추가
        appBg: appBg,
        headerTitleColor: textColor,
        borderColor: borderColor,

        // 기존 속성
        sidebarBg: bg.hex, headerBg: bg.hex, footerBg: bg.hex, chatBg: bg.hex,
        buttonBg: accent.hex, bubbleMeBg: accent.hex, nameMeColor: accent.hex,
        bubbleOtherBg: secondary.hex,
        textColor, nameOtherColor: mutedTextColor,
        sidebarInputBg: inputBg, inputBg: inputBg,
    };
}


/**
 * 메인 함수: 팔레트에서 3가지 스타일의 테마를 안정적으로 생성
 */
export function generateThemesFromPalette(palette) {
  if (!palette || palette.length < 3) return [];

  const colors = palette.map(rgb => ({
    hex: rgbToHex(rgb),
    hsl: rgbToHsl(rgb),
  }));

  // 1. 역할별 최고 후보 선정
  const sortedByLightness = [...colors].sort((a, b) => a.hsl.l - b.hsl.l);
  const sortedBySaturation = [...colors].sort((a, b) => b.hsl.s - a.hsl.s);

  // 2. 각 후보를 배경으로 테마 생성
  const themeCandidates = {
      dark: createTheme("다크 테마", sortedByLightness[0], colors),
      light: createTheme("라이트 테마", sortedByLightness[colors.length - 1], colors),
      vibrant: createTheme("컬러풀 테마", sortedBySaturation[0], colors),
  };

  // 3. 유효하고 중복되지 않는 테마만 필터링
  const uniqueThemes = Array.from(
      new Map(
          Object.values(themeCandidates)
              .filter(Boolean) // null 제거
              .map(theme => [theme.sidebarBg, theme])
      )
  ).map(([, theme]) => theme);

  return uniqueThemes;
}


